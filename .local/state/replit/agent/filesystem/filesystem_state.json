{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Smart Education Platform\n\n## Overview\n\nThis is a full-stack Smart Education platform designed to connect students, teachers, and parents in a comprehensive learning ecosystem. The platform features role-based dashboards, real-time communication, assignment management, emotional wellness monitoring, and interactive course delivery. Built with modern web technologies, it provides a futuristic user interface with glassmorphism design and smooth animations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 19 with TypeScript 5 for type safety and modern React features\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Framework**: TailwindCSS 4 with custom design system featuring glassmorphism effects\n- **Animation Library**: Framer Motion for smooth transitions and interactive animations\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state and React Context API for global client state\n- **Component Library**: Radix UI primitives with custom shadcn/ui components\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful APIs with structured route organization\n- **Real-time Communication**: WebSocket integration for live updates and notifications\n- **Session Management**: Express sessions with PostgreSQL store for persistence\n\n### Authentication & Authorization\n- **Strategy**: Passport.js with local authentication strategy\n- **Password Security**: Scrypt-based password hashing with salt\n- **Session Storage**: PostgreSQL-backed session store using connect-pg-simple\n- **Role-based Access**: Three distinct user roles (student, teacher, parent) with differentiated permissions\n\n### Database Architecture\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database queries and migrations\n- **Schema Design**: Relational model supporting users, courses, assignments, announcements, emotions, and timetables\n- **Connection Management**: Connection pooling with @neondatabase/serverless\n\n### Real-time Features\n- **WebSocket Server**: Native WebSocket implementation for real-time updates\n- **Event Broadcasting**: Live notifications for new assignments, announcements, and emotional state changes\n- **Client Synchronization**: Automatic UI updates when data changes occur\n\n### UI/UX Design System\n- **Design Philosophy**: Futuristic aesthetic with glassmorphism and neon glow effects\n- **Color Scheme**: Dark theme with cyan primary, purple secondary, and pink accent colors\n- **Typography**: Inter font family with multiple weights\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Animation Strategy**: Micro-interactions and page transitions using Framer Motion\n\n### Development Workflow\n- **Type Safety**: Full TypeScript coverage across frontend, backend, and shared schemas\n- **Code Organization**: Monorepo structure with shared types between client and server\n- **Build Process**: Separate builds for client (Vite) and server (esbuild)\n- **Development Server**: Hot module replacement with Vite dev server\n\n## External Dependencies\n\n### Database & Hosting\n- **Neon Database**: Serverless PostgreSQL hosting with built-in connection pooling\n- **WebSocket Support**: Native WebSocket constructor for Neon compatibility\n\n### UI Components & Styling\n- **Radix UI**: Accessible primitive components for complex UI patterns\n- **TailwindCSS**: Utility-first CSS framework for rapid styling\n- **Framer Motion**: Production-ready motion library for React animations\n\n### Development Tools\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Fast JavaScript bundler for server builds\n- **Vite**: Next-generation frontend build tool with HMR\n\n### Authentication & Security\n- **Passport.js**: Flexible authentication middleware\n- **Connect-PG-Simple**: PostgreSQL session store for Express\n- **Crypto Module**: Node.js built-in cryptography for password hashing\n\n### State Management\n- **TanStack Query**: Server state management with caching and synchronization\n- **Date-fns**: Modern date utility library for time formatting\n\n### Monitoring & Wellness\n- **Emotion Tracking**: Placeholder infrastructure for AI-powered emotion detection\n- **Performance Analytics**: Framework for tracking student progress and engagement\n- **Real-time Notifications**: WebSocket-based instant messaging system","size_bytes":4583},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"glow\": \"glow 2s ease-in-out infinite alternate\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"pulse-slow\": \"pulse-slow 3s ease-in-out infinite\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glow: {\n          from: { \n            boxShadow: \"0 0 20px hsl(195 100% 55% / 0.5), 0 0 60px hsl(195 100% 55% / 0.2)\" \n          },\n          to: { \n            boxShadow: \"0 0 30px hsl(195 100% 55% / 0.8), 0 0 80px hsl(195 100% 55% / 0.4)\" \n          },\n        },\n        float: {\n          \"0%, 100%\": { \n            transform: \"translateY(0px)\" \n          },\n          \"50%\": { \n            transform: \"translateY(-10px)\" \n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": { \n            opacity: \"1\" \n          },\n          \"50%\": { \n            opacity: \"0.5\" \n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3543},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    }),\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: 'email' },\n      async (email, password, done) => {\n        const user = await storage.getUserByEmail(email);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      }\n    ),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    if (!user) {\n      return done(null, false);\n    }\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByEmail(req.body.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3119},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertCourseSchema, insertAssignmentSchema, insertAnnouncementSchema, insertEmotionSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  setupAuth(app);\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Course routes\n  app.get(\"/api/courses\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user;\n      let courses;\n      \n      if (user.role === \"teacher\") {\n        courses = await storage.getCoursesByTeacher(user.id);\n      } else if (user.role === \"student\") {\n        courses = await storage.getCoursesByStudent(user.id);\n      } else {\n        courses = [];\n      }\n      \n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.post(\"/api/courses\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"teacher\") {\n        return res.status(403).json({ message: \"Only teachers can create courses\" });\n      }\n      \n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData, req.user.id);\n      \n      // Broadcast new course to connected clients\n      broadcastToClients({\n        type: \"new_course\",\n        data: course\n      });\n      \n      res.status(201).json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create course\" });\n    }\n  });\n\n  app.post(\"/api/courses/:id/enroll\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"student\") {\n        return res.status(403).json({ message: \"Only students can enroll in courses\" });\n      }\n      \n      const courseId = req.params.id;\n      const studentId = req.user.id;\n      \n      await storage.enrollStudent(courseId, studentId);\n      \n      res.status(201).json({ message: \"Successfully enrolled in course\", courseId, studentId });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to enroll in course\" });\n    }\n  });\n\n  // Teacher analytics route\n  app.get(\"/api/teacher/analytics\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"teacher\") {\n        return res.status(403).json({ message: \"Only teachers can access analytics\" });\n      }\n      \n      const analytics = await storage.getTeacherAnalytics(req.user.id);\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teacher analytics\" });\n    }\n  });\n\n  // Assignment routes\n  app.get(\"/api/assignments\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user;\n      \n      if (user.role === \"student\") {\n        const assignments = await storage.getAssignmentsByStudent(user.id);\n        res.json(assignments);\n      } else if (user.role === \"teacher\") {\n        const assignments = await storage.getAssignmentsByTeacher(user.id);\n        res.json(assignments);\n      } else {\n        res.json([]);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"teacher\") {\n        return res.status(403).json({ message: \"Only teachers can create assignments\" });\n      }\n      \n      console.log(\"[DEBUG] Assignment creation - Request body:\", req.body);\n      const assignmentData = insertAssignmentSchema.parse(req.body);\n      console.log(\"[DEBUG] Assignment creation - Parsed data:\", assignmentData);\n      \n      const assignment = await storage.createAssignment(assignmentData);\n      console.log(\"[DEBUG] Assignment creation - Created assignment:\", assignment);\n      \n      // Broadcast new assignment to connected clients\n      broadcastToClients({\n        type: \"new_assignment\",\n        data: assignment\n      });\n      \n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error(\"[ERROR] Assignment creation failed:\", error);\n      res.status(500).json({ message: \"Failed to create assignment\" });\n    }\n  });\n\n  app.post(\"/api/assignments/:id/submit\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"student\") {\n        return res.status(403).json({ message: \"Only students can submit assignments\" });\n      }\n      \n      const submission = await storage.submitAssignment({\n        assignmentId: req.params.id,\n        studentId: req.user.id,\n        content: req.body.content,\n        attachments: req.body.attachments\n      });\n\n      // Broadcast new submission to relevant users only (specific teacher)\n      try {\n        // Get assignment details to find the specific teacher\n        const assignment = await storage.getAssignmentById(req.params.id);\n        if (!assignment) {\n          console.error('Failed to find assignment for submission notification');\n        } else {\n          const teacherId = assignment.teacherId;\n          const targetUsers = [teacherId]; // Only the specific teacher\n          \n          // Send only to the assignment's teacher to avoid privacy leaks\n          broadcastToSpecificUsers({\n            type: \"new_submission\",\n            data: {\n              submissionId: submission.id,\n              assignmentId: req.params.id,\n              studentId: req.user.id\n            }\n          }, targetUsers);\n          \n          console.log(`Submission notification sent for assignment ${req.params.id} to teacher ${teacherId}`);\n        }\n      } catch (error) {\n        console.error('Failed to broadcast submission notification:', error);\n      }\n      \n      res.status(201).json(submission);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to submit assignment\" });\n    }\n  });\n\n  app.post(\"/api/assignments/:id/grade\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"teacher\") {\n        return res.status(403).json({ message: \"Only teachers can grade assignments\" });\n      }\n      \n      const { submissionId, grade, feedback } = req.body;\n      \n      if (!submissionId || grade === undefined) {\n        return res.status(400).json({ message: \"Submission ID and grade are required\" });\n      }\n      \n      await storage.gradeAssignment(submissionId, grade, feedback || \"\");\n\n      // Broadcast grade update to relevant users only (student and parents)\n      try {\n        // Get submission details to securely derive student ID\n        const submission = await storage.getSubmissionById(submissionId);\n        if (!submission) {\n          console.error('Failed to find submission for grading notification');\n          return;\n        }\n        \n        const studentId = submission.studentId;\n        const targetUsers = [studentId]; // Include the student\n        \n        // Send only to the graded student to avoid privacy leaks\n        broadcastToSpecificUsers({\n          type: \"grade_updated\",\n          data: {\n            submissionId,\n            assignmentId: req.params.id,\n            grade,\n            feedback\n          }\n        }, targetUsers);\n        \n        console.log(`Grade notification sent for assignment ${req.params.id} to student ${studentId}`);\n      } catch (error) {\n        console.error('Failed to broadcast grade notification:', error);\n      }\n      \n      res.json({ message: \"Assignment graded successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to grade assignment\" });\n    }\n  });\n\n  // Announcement routes\n  app.get(\"/api/announcements\", requireAuth, async (req, res) => {\n    try {\n      const announcements = await storage.getAnnouncements(req.user.id);\n      res.json(announcements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  app.post(\"/api/announcements\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"POST /api/announcements - User:\", req.user.role);\n      console.log(\"POST /api/announcements - Request body:\", JSON.stringify(req.body, null, 2));\n      \n      if (req.user.role !== \"teacher\") {\n        return res.status(403).json({ message: \"Only teachers can create announcements\" });\n      }\n      \n      const announcementData = insertAnnouncementSchema.parse({\n        ...req.body,\n        authorId: req.user.id\n      });\n      \n      console.log(\"POST /api/announcements - Parsed data:\", JSON.stringify(announcementData, null, 2));\n      \n      const announcement = await storage.createAnnouncement(announcementData);\n      \n      console.log(\"POST /api/announcements - Created announcement:\", JSON.stringify(announcement, null, 2));\n      \n      // Broadcast announcement to connected clients\n      broadcastToClients({\n        type: \"new_announcement\",\n        data: announcement\n      });\n      \n      res.status(201).json(announcement);\n    } catch (error) {\n      console.error(\"POST /api/announcements - Error:\", error);\n      res.status(500).json({ message: \"Failed to create announcement\" });\n    }\n  });\n\n  // Timetable routes\n  app.get(\"/api/timetable\", requireAuth, async (req, res) => {\n    try {\n      const timetable = await storage.getTimetableByStudent(req.user.id);\n      res.json(timetable);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch timetable\" });\n    }\n  });\n\n  app.post(\"/api/timetable\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"teacher\") {\n        return res.status(403).json({ message: \"Only teachers can create timetable entries\" });\n      }\n      \n      const entry = await storage.createTimetableEntry(req.body);\n      \n      // Broadcast timetable update to connected clients\n      broadcastToClients({\n        type: \"timetable_updated\",\n        data: entry\n      });\n      \n      res.status(201).json(entry);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create timetable entry\" });\n    }\n  });\n\n  // Emotion routes\n  app.get(\"/api/emotions\", requireAuth, async (req, res) => {\n    try {\n      const emotions = await storage.getEmotionsByStudent(req.user.id);\n      res.json(emotions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch emotions\" });\n    }\n  });\n\n  app.post(\"/api/emotions\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"student\") {\n        return res.status(403).json({ message: \"Only students can record emotions\" });\n      }\n      \n      const emotionData = insertEmotionSchema.parse(req.body);\n      const emotion = await storage.createEmotionEntry(emotionData, req.user.id);\n      res.status(201).json(emotion);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to record emotion\" });\n    }\n  });\n\n  // Parent routes\n  app.get(\"/api/children\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"parent\") {\n        return res.status(403).json({ message: \"Only parents can access this endpoint\" });\n      }\n      \n      const children = await storage.getChildrenByParent(req.user.id);\n      res.json(children);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch children\" });\n    }\n  });\n\n  // Helper function to verify parent-child relationship\n  async function verifyParentChildRelationship(parentId: string, childId: string): Promise<boolean> {\n    const children = await storage.getChildrenByParent(parentId);\n    return children.some(child => child.id === childId);\n  }\n\n  app.get(\"/api/children/:childId/assignments\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"parent\") {\n        return res.status(403).json({ message: \"Only parents can access this endpoint\" });\n      }\n      \n      const { childId } = req.params;\n      \n      // Verify this child belongs to the parent\n      const isValidChild = await verifyParentChildRelationship(req.user.id, childId);\n      if (!isValidChild) {\n        return res.status(403).json({ message: \"You can only access your own children's data\" });\n      }\n      \n      const assignments = await storage.getAssignmentsByStudent(childId);\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch child's assignments\" });\n    }\n  });\n\n  app.get(\"/api/children/:childId/courses\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"parent\") {\n        return res.status(403).json({ message: \"Only parents can access this endpoint\" });\n      }\n      \n      const { childId } = req.params;\n      \n      // Verify this child belongs to the parent\n      const isValidChild = await verifyParentChildRelationship(req.user.id, childId);\n      if (!isValidChild) {\n        return res.status(403).json({ message: \"You can only access your own children's data\" });\n      }\n      \n      const courses = await storage.getCoursesByStudent(childId);\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch child's courses\" });\n    }\n  });\n\n  app.get(\"/api/children/:childId/emotions\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"parent\") {\n        return res.status(403).json({ message: \"Only parents can access this endpoint\" });\n      }\n      \n      const { childId } = req.params;\n      \n      // Verify this child belongs to the parent\n      const isValidChild = await verifyParentChildRelationship(req.user.id, childId);\n      if (!isValidChild) {\n        return res.status(403).json({ message: \"You can only access your own children's data\" });\n      }\n      \n      const emotions = await storage.getEmotionsByStudent(childId);\n      res.json(emotions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch child's emotions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket setup with user tracking\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const clients = new Map<WebSocket, { userId: string; role: string }>();\n\n  wss.on('connection', (ws) => {\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        if (message.type === 'auth') {\n          // Store user info with WebSocket connection\n          clients.set(ws, { userId: message.userId, role: message.role });\n        }\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      clients.delete(ws);\n    });\n  });\n\n  // Broadcast functions\n  function broadcastToClients(message: any) {\n    const messageString = JSON.stringify(message);\n    clients.forEach((userInfo, client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageString);\n      }\n    });\n  }\n\n  function broadcastToSpecificUsers(message: any, targetUserIds: string[]) {\n    const messageString = JSON.stringify(message);\n    clients.forEach((userInfo, client) => {\n      if (client.readyState === WebSocket.OPEN && targetUserIds.includes(userInfo.userId)) {\n        client.send(messageString);\n      }\n    });\n  }\n\n  function broadcastToRoles(message: any, targetRoles: string[]) {\n    const messageString = JSON.stringify(message);\n    clients.forEach((userInfo, client) => {\n      if (client.readyState === WebSocket.OPEN && targetRoles.includes(userInfo.role)) {\n        client.send(messageString);\n      }\n    });\n  }\n\n  return httpServer;\n}\n","size_bytes":15699},"server/storage.ts":{"content":"import { \n  users, \n  courses, \n  assignments, \n  announcements, \n  courseEnrollments,\n  assignmentSubmissions,\n  timetableEntries,\n  emotionEntries,\n  notifications,\n  parentChildren,\n  courseMaterials,\n  attendanceRecords,\n  type User, \n  type InsertUser,\n  type Course,\n  type Assignment,\n  type Announcement,\n  type AssignmentSubmission,\n  type TimetableEntry,\n  type EmotionEntry\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, or, count, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Course management\n  getCoursesByTeacher(teacherId: string): Promise<Course[]>;\n  getCoursesByStudent(studentId: string): Promise<Course[]>;\n  createCourse(course: any, teacherId: string): Promise<Course>;\n  enrollStudent(courseId: string, studentId: string): Promise<void>;\n  \n  // Assignment management\n  getAssignmentsByCourse(courseId: string): Promise<Assignment[]>;\n  getAssignmentsByStudent(studentId: string): Promise<any[]>;\n  getAssignmentsByTeacher(teacherId: string): Promise<any[]>;\n  createAssignment(assignment: any): Promise<Assignment>;\n  submitAssignment(submission: any): Promise<AssignmentSubmission>;\n  gradeAssignment(submissionId: string, grade: number, feedback: string): Promise<void>;\n  \n  // Announcements\n  getAnnouncements(userId: string): Promise<Announcement[]>;\n  createAnnouncement(announcement: any): Promise<Announcement>;\n  \n  // Timetable\n  getTimetableByStudent(studentId: string): Promise<TimetableEntry[]>;\n  createTimetableEntry(entry: any): Promise<TimetableEntry>;\n  \n  // Emotions\n  getEmotionsByStudent(studentId: string): Promise<EmotionEntry[]>;\n  createEmotionEntry(entry: any, studentId: string): Promise<EmotionEntry>;\n  \n  // Parent functionality\n  getChildrenByParent(parentId: string): Promise<User[]>;\n  linkParentChild(parentId: string, childId: string): Promise<void>;\n  \n  // Analytics\n  getTeacherAnalytics(teacherId: string): Promise<{\n    totalStudents: number;\n    assignmentsGraded: number;\n    averageGrade: number;\n    recentActivity: any[];\n  }>;\n  \n  sessionStore: session.SessionStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getCoursesByTeacher(teacherId: string): Promise<Course[]> {\n    return await db\n      .select()\n      .from(courses)\n      .where(eq(courses.teacherId, teacherId))\n      .orderBy(desc(courses.createdAt));\n  }\n\n  async getCoursesByStudent(studentId: string): Promise<Course[]> {\n    return await db\n      .select({\n        id: courses.id,\n        title: courses.title,\n        description: courses.description,\n        teacherId: courses.teacherId,\n        thumbnail: courses.thumbnail,\n        isActive: courses.isActive,\n        createdAt: courses.createdAt,\n        updatedAt: courses.updatedAt,\n        progress: courseEnrollments.progress,\n      })\n      .from(courses)\n      .innerJoin(courseEnrollments, eq(courses.id, courseEnrollments.courseId))\n      .where(eq(courseEnrollments.studentId, studentId))\n      .orderBy(desc(courses.createdAt));\n  }\n\n  async createCourse(course: any, teacherId: string): Promise<Course> {\n    const [newCourse] = await db\n      .insert(courses)\n      .values({ ...course, teacherId })\n      .returning();\n    return newCourse;\n  }\n\n  async enrollStudent(courseId: string, studentId: string): Promise<void> {\n    // Check if student is already enrolled\n    const existingEnrollment = await db\n      .select()\n      .from(courseEnrollments)\n      .where(and(\n        eq(courseEnrollments.courseId, courseId),\n        eq(courseEnrollments.studentId, studentId)\n      ))\n      .limit(1);\n\n    // If already enrolled, do nothing (idempotent operation)\n    if (existingEnrollment.length > 0) {\n      return;\n    }\n\n    // Otherwise, enroll the student\n    await db\n      .insert(courseEnrollments)\n      .values({ courseId, studentId });\n  }\n\n  async getAssignmentsByCourse(courseId: string): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(eq(assignments.courseId, courseId))\n      .orderBy(asc(assignments.dueDate));\n  }\n\n  async getAssignmentById(assignmentId: string): Promise<any> {\n    const [assignment] = await db\n      .select({\n        id: assignments.id,\n        title: assignments.title,\n        courseId: assignments.courseId,\n        teacherId: courses.teacherId,\n        courseTitle: courses.title,\n      })\n      .from(assignments)\n      .innerJoin(courses, eq(assignments.courseId, courses.id))\n      .where(eq(assignments.id, assignmentId));\n    return assignment;\n  }\n\n  async getSubmissionById(submissionId: string): Promise<any> {\n    const [submission] = await db\n      .select({\n        id: assignmentSubmissions.id,\n        assignmentId: assignmentSubmissions.assignmentId,\n        studentId: assignmentSubmissions.studentId,\n        grade: assignmentSubmissions.grade,\n        status: assignmentSubmissions.status,\n      })\n      .from(assignmentSubmissions)\n      .where(eq(assignmentSubmissions.id, submissionId));\n    return submission;\n  }\n\n  async getAssignmentsByStudent(studentId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: assignments.id,\n        title: assignments.title,\n        description: assignments.description,\n        dueDate: assignments.dueDate,\n        maxPoints: assignments.maxPoints,\n        courseTitle: courses.title,\n        status: assignmentSubmissions.status,\n        grade: assignmentSubmissions.grade,\n        submittedAt: assignmentSubmissions.submittedAt,\n      })\n      .from(assignments)\n      .innerJoin(courses, eq(assignments.courseId, courses.id))\n      .innerJoin(courseEnrollments, eq(courses.id, courseEnrollments.courseId))\n      .leftJoin(assignmentSubmissions, \n        and(\n          eq(assignments.id, assignmentSubmissions.assignmentId),\n          eq(assignmentSubmissions.studentId, studentId)\n        )\n      )\n      .where(eq(courseEnrollments.studentId, studentId))\n      .orderBy(asc(assignments.dueDate));\n  }\n\n  async getAssignmentsByTeacher(teacherId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: assignments.id,\n        title: assignments.title,\n        description: assignments.description,\n        dueDate: assignments.dueDate,\n        maxPoints: assignments.maxPoints,\n        courseTitle: courses.title,\n        courseId: courses.id,\n        submissionCount: count(assignmentSubmissions.id),\n        createdAt: assignments.createdAt,\n      })\n      .from(assignments)\n      .innerJoin(courses, eq(assignments.courseId, courses.id))\n      .leftJoin(assignmentSubmissions, eq(assignments.id, assignmentSubmissions.assignmentId))\n      .where(eq(courses.teacherId, teacherId))\n      .groupBy(assignments.id, courses.id, courses.title)\n      .orderBy(desc(assignments.createdAt));\n  }\n\n  async createAssignment(assignment: any): Promise<Assignment> {\n    const [newAssignment] = await db\n      .insert(assignments)\n      .values(assignment)\n      .returning();\n    return newAssignment;\n  }\n\n  async submitAssignment(submission: any): Promise<AssignmentSubmission> {\n    const [newSubmission] = await db\n      .insert(assignmentSubmissions)\n      .values({ ...submission, status: \"submitted\" })\n      .returning();\n    return newSubmission;\n  }\n\n  async gradeAssignment(submissionId: string, grade: number, feedback: string): Promise<void> {\n    await db\n      .update(assignmentSubmissions)\n      .set({ \n        grade, \n        feedback, \n        status: \"graded\",\n        gradedAt: new Date()\n      })\n      .where(eq(assignmentSubmissions.id, submissionId));\n  }\n\n  async getAnnouncements(userId: string): Promise<Announcement[]> {\n    // Get user's enrolled courses\n    const userCourses = await db\n      .select({ courseId: courseEnrollments.courseId })\n      .from(courseEnrollments)\n      .where(eq(courseEnrollments.studentId, userId));\n\n    const courseIds = userCourses.map(c => c.courseId);\n\n    return await db\n      .select({\n        id: announcements.id,\n        title: announcements.title,\n        content: announcements.content,\n        authorId: announcements.authorId,\n        courseId: announcements.courseId,\n        isGlobal: announcements.isGlobal,\n        createdAt: announcements.createdAt,\n        authorName: users.firstName,\n        courseName: courses.title,\n      })\n      .from(announcements)\n      .innerJoin(users, eq(announcements.authorId, users.id))\n      .leftJoin(courses, eq(announcements.courseId, courses.id))\n      .where(\n        or(\n          eq(announcements.isGlobal, true),\n          courseIds.length > 0 ? eq(announcements.courseId, courseIds[0]) : eq(announcements.isGlobal, true)\n        )\n      )\n      .orderBy(desc(announcements.createdAt));\n  }\n\n  async createAnnouncement(announcement: any): Promise<Announcement> {\n    const [newAnnouncement] = await db\n      .insert(announcements)\n      .values(announcement)\n      .returning();\n    return newAnnouncement;\n  }\n\n  async getTimetableByStudent(studentId: string): Promise<TimetableEntry[]> {\n    return await db\n      .select({\n        id: timetableEntries.id,\n        title: timetableEntries.title,\n        dayOfWeek: timetableEntries.dayOfWeek,\n        startTime: timetableEntries.startTime,\n        endTime: timetableEntries.endTime,\n        location: timetableEntries.location,\n        courseTitle: courses.title,\n        courseId: timetableEntries.courseId,\n        createdAt: timetableEntries.createdAt,\n      })\n      .from(timetableEntries)\n      .innerJoin(courses, eq(timetableEntries.courseId, courses.id))\n      .innerJoin(courseEnrollments, eq(courses.id, courseEnrollments.courseId))\n      .where(eq(courseEnrollments.studentId, studentId))\n      .orderBy(asc(timetableEntries.dayOfWeek), asc(timetableEntries.startTime));\n  }\n\n  async createTimetableEntry(entry: any): Promise<TimetableEntry> {\n    const [newEntry] = await db\n      .insert(timetableEntries)\n      .values(entry)\n      .returning();\n    return newEntry;\n  }\n\n  async getEmotionsByStudent(studentId: string): Promise<EmotionEntry[]> {\n    return await db\n      .select()\n      .from(emotionEntries)\n      .where(eq(emotionEntries.studentId, studentId))\n      .orderBy(desc(emotionEntries.detectedAt))\n      .limit(50);\n  }\n\n  async createEmotionEntry(entry: any, studentId: string): Promise<EmotionEntry> {\n    const [newEntry] = await db\n      .insert(emotionEntries)\n      .values({ ...entry, studentId })\n      .returning();\n    return newEntry;\n  }\n\n  async getChildrenByParent(parentId: string): Promise<User[]> {\n    return await db\n      .select({\n        id: users.id,\n        username: users.username,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        role: users.role,\n        profilePicture: users.profilePicture,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        password: users.password,\n      })\n      .from(users)\n      .innerJoin(parentChildren, eq(users.id, parentChildren.childId))\n      .where(eq(parentChildren.parentId, parentId));\n  }\n\n  async linkParentChild(parentId: string, childId: string): Promise<void> {\n    await db\n      .insert(parentChildren)\n      .values({ parentId, childId });\n  }\n\n  async getTeacherAnalytics(teacherId: string): Promise<{\n    totalStudents: number;\n    assignmentsGraded: number;\n    averageGrade: number;\n    recentActivity: any[];\n  }> {\n    // Get courses taught by this teacher\n    const teacherCourses = await db\n      .select({ id: courses.id })\n      .from(courses)\n      .where(eq(courses.teacherId, teacherId));\n    \n    const courseIds = teacherCourses.map(course => course.id);\n    \n    if (courseIds.length === 0) {\n      return {\n        totalStudents: 0,\n        assignmentsGraded: 0,\n        averageGrade: 0,\n        recentActivity: []\n      };\n    }\n\n    // Count total students enrolled in teacher's courses\n    const [studentsResult] = await db\n      .select({ count: count() })\n      .from(courseEnrollments)\n      .where(courseIds.length === 1 \n        ? eq(courseEnrollments.courseId, courseIds[0])\n        : or(...courseIds.map(id => eq(courseEnrollments.courseId, id)))\n      );\n\n    // Get assignments created by this teacher and count graded ones\n    const teacherAssignments = await db\n      .select({ id: assignments.id })\n      .from(assignments)\n      .where(courseIds.length === 1 \n        ? eq(assignments.courseId, courseIds[0])\n        : or(...courseIds.map(id => eq(assignments.courseId, id)))\n      );\n    \n    const assignmentIds = teacherAssignments.map(a => a.id);\n    \n    let assignmentsGraded = 0;\n    let averageGrade = 0;\n    \n    if (assignmentIds.length > 0) {\n      // Count graded assignments\n      const [gradedResult] = await db\n        .select({ count: count() })\n        .from(assignmentSubmissions)\n        .where(and(\n          assignmentIds.length === 1 \n            ? eq(assignmentSubmissions.assignmentId, assignmentIds[0])\n            : or(...assignmentIds.map(id => eq(assignmentSubmissions.assignmentId, id))),\n          sql`grade IS NOT NULL`\n        ));\n      \n      assignmentsGraded = gradedResult.count;\n\n      // Calculate average grade\n      const gradeResults = await db\n        .select({ grade: assignmentSubmissions.grade })\n        .from(assignmentSubmissions)\n        .where(and(\n          assignmentIds.length === 1 \n            ? eq(assignmentSubmissions.assignmentId, assignmentIds[0])\n            : or(...assignmentIds.map(id => eq(assignmentSubmissions.assignmentId, id))),\n          sql`grade IS NOT NULL`\n        ));\n      \n      if (gradeResults.length > 0) {\n        const totalGrade = gradeResults.reduce((sum, result) => sum + (result.grade || 0), 0);\n        averageGrade = Math.round((totalGrade / gradeResults.length) * 10) / 10;\n      }\n    }\n\n    // Get recent activity (recent submissions and grading)\n    let recentActivity = [];\n    if (assignmentIds.length > 0) {\n      recentActivity = await db\n        .select({\n          id: assignmentSubmissions.id,\n          type: sql`'submission'`.as('type'),\n          assignmentTitle: assignments.title,\n          studentName: sql`CONCAT(${users.firstName}, ' ', ${users.lastName})`.as('studentName'),\n          timestamp: assignmentSubmissions.submittedAt,\n          status: assignmentSubmissions.status\n        })\n        .from(assignmentSubmissions)\n        .innerJoin(assignments, eq(assignmentSubmissions.assignmentId, assignments.id))\n        .innerJoin(users, eq(assignmentSubmissions.studentId, users.id))\n        .where(assignmentIds.length === 1 \n          ? eq(assignments.id, assignmentIds[0])\n          : or(...assignmentIds.map(id => eq(assignments.id, id)))\n        )\n        .orderBy(desc(assignmentSubmissions.submittedAt))\n        .limit(10);\n    }\n\n    return {\n      totalStudents: studentsResult.count,\n      assignmentsGraded,\n      averageGrade,\n      recentActivity\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15925},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roleEnum = pgEnum(\"role\", [\"student\", \"teacher\", \"parent\"]);\nexport const assignmentStatusEnum = pgEnum(\"assignment_status\", [\"pending\", \"submitted\", \"graded\"]);\nexport const emotionEnum = pgEnum(\"emotion\", [\"happy\", \"sad\", \"stressed\", \"focused\", \"confused\", \"excited\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: roleEnum(\"role\").notNull(),\n  profilePicture: text(\"profile_picture\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Parent-Child relationship\nexport const parentChildren = pgTable(\"parent_children\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  parentId: varchar(\"parent_id\").references(() => users.id).notNull(),\n  childId: varchar(\"child_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  thumbnail: text(\"thumbnail\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Course enrollments\nexport const courseEnrollments = pgTable(\"course_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  progress: integer(\"progress\").default(0),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n});\n\n// Course materials\nexport const courseMaterials = pgTable(\"course_materials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // video, document, quiz, etc.\n  url: text(\"url\"),\n  content: text(\"content\"),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Assignments table\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dueDate: timestamp(\"due_date\").notNull(),\n  maxPoints: integer(\"max_points\").default(100),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Assignment submissions\nexport const assignmentSubmissions = pgTable(\"assignment_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assignmentId: varchar(\"assignment_id\").references(() => assignments.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  content: text(\"content\"),\n  attachments: jsonb(\"attachments\"),\n  status: assignmentStatusEnum(\"status\").default(\"pending\"),\n  grade: integer(\"grade\"),\n  feedback: text(\"feedback\"),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n  gradedAt: timestamp(\"graded_at\"),\n});\n\n// Timetable entries\nexport const timetableEntries = pgTable(\"timetable_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  title: text(\"title\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6 (Sunday-Saturday)\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(),\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Announcements\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  isGlobal: boolean(\"is_global\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Emotion tracking\nexport const emotionEntries = pgTable(\"emotion_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  emotion: emotionEnum(\"emotion\").notNull(),\n  intensity: integer(\"intensity\").notNull(), // 1-10 scale\n  context: text(\"context\"), // what they were doing\n  detectedAt: timestamp(\"detected_at\").defaultNow(),\n});\n\n// Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // assignment, announcement, grade, etc.\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Attendance tracking\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  date: timestamp(\"date\").notNull(),\n  status: varchar(\"status\", { enum: [\"present\", \"absent\", \"late\", \"excused\"] }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  courses: many(courses),\n  enrollments: many(courseEnrollments),\n  assignments: many(assignmentSubmissions),\n  announcements: many(announcements),\n  emotions: many(emotionEntries),\n  notifications: many(notifications),\n  parentRelations: many(parentChildren, { relationName: \"parent\" }),\n  childRelations: many(parentChildren, { relationName: \"child\" }),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  teacher: one(users, { fields: [courses.teacherId], references: [users.id] }),\n  enrollments: many(courseEnrollments),\n  assignments: many(assignments),\n  materials: many(courseMaterials),\n  timetableEntries: many(timetableEntries),\n  announcements: many(announcements),\n}));\n\nexport const courseEnrollmentsRelations = relations(courseEnrollments, ({ one }) => ({\n  course: one(courses, { fields: [courseEnrollments.courseId], references: [courses.id] }),\n  student: one(users, { fields: [courseEnrollments.studentId], references: [users.id] }),\n}));\n\nexport const assignmentsRelations = relations(assignments, ({ one, many }) => ({\n  course: one(courses, { fields: [assignments.courseId], references: [courses.id] }),\n  submissions: many(assignmentSubmissions),\n}));\n\nexport const assignmentSubmissionsRelations = relations(assignmentSubmissions, ({ one }) => ({\n  assignment: one(assignments, { fields: [assignmentSubmissions.assignmentId], references: [assignments.id] }),\n  student: one(users, { fields: [assignmentSubmissions.studentId], references: [users.id] }),\n}));\n\nexport const announcementsRelations = relations(announcements, ({ one }) => ({\n  author: one(users, { fields: [announcements.authorId], references: [users.id] }),\n  course: one(courses, { fields: [announcements.courseId], references: [courses.id] }),\n}));\n\nexport const parentChildrenRelations = relations(parentChildren, ({ one }) => ({\n  parent: one(users, { fields: [parentChildren.parentId], references: [users.id], relationName: \"parent\" }),\n  child: one(users, { fields: [parentChildren.childId], references: [users.id], relationName: \"child\" }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  role: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).pick({\n  title: true,\n  description: true,\n  thumbnail: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).pick({\n  courseId: true,\n  title: true,\n  description: true,\n  dueDate: true,\n  maxPoints: true,\n}).extend({\n  dueDate: z.coerce.date(), // Convert string dates to Date objects\n  description: z.string().default(\"\"),\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).pick({\n  title: true,\n  content: true,\n  courseId: true,\n  isGlobal: true,\n  authorId: true,\n}).extend({\n  courseId: z.string().nullable().optional(),\n  isGlobal: z.boolean().default(false),\n});\n\nexport const insertEmotionSchema = createInsertSchema(emotionEntries).pick({\n  emotion: true,\n  intensity: true,\n  context: true,\n});\n\nexport const insertTimetableSchema = createInsertSchema(timetableEntries).pick({\n  courseId: true,\n  title: true,\n  dayOfWeek: true,\n  startTime: true,\n  endTime: true,\n  location: true,\n}).extend({\n  location: z.string().default(\"\"),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Assignment = typeof assignments.$inferSelect;\nexport type AssignmentSubmission = typeof assignmentSubmissions.$inferSelect;\nexport type Announcement = typeof announcements.$inferSelect;\nexport type EmotionEntry = typeof emotionEntries.$inferSelect;\nexport type TimetableEntry = typeof timetableEntries.$inferSelect;\nexport type InsertTimetable = z.infer<typeof insertTimetableSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":10184},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ThemeProvider } from \"@/context/theme-context\";\nimport { WebSocketProvider } from \"@/context/websocket-context\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\nimport AuthPage from \"@/pages/auth-page\";\nimport StudentDashboard from \"@/pages/student-dashboard\";\nimport TeacherDashboard from \"@/pages/teacher-dashboard\";\nimport ParentDashboard from \"@/pages/parent-dashboard\";\nimport CoursePlayer from \"@/pages/course-player\";\nimport CoursesPage from \"@/pages/courses-page\";\nimport AssignmentsPage from \"@/pages/assignments-page\";\nimport TimetablePage from \"@/pages/timetable-page\";\nimport EmotionMonitorPage from \"@/pages/emotion-monitor-page\";\nimport AnnouncementsPage from \"@/pages/announcements-page\";\nimport AnalyticsPage from \"@/pages/analytics-page\";\nimport ProfileSettings from \"@/pages/profile-settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={StudentDashboard} />\n      <ProtectedRoute path=\"/student\" component={StudentDashboard} />\n      <ProtectedRoute path=\"/teacher\" component={TeacherDashboard} />\n      <ProtectedRoute path=\"/parent\" component={ParentDashboard} />\n      <ProtectedRoute path=\"/courses\" component={CoursesPage} />\n      <ProtectedRoute path=\"/course/:id\" component={CoursePlayer} />\n      <ProtectedRoute path=\"/assignments\" component={AssignmentsPage} />\n      <ProtectedRoute path=\"/timetable\" component={TimetablePage} />\n      <ProtectedRoute path=\"/emotion-monitor\" component={EmotionMonitorPage} />\n      <ProtectedRoute path=\"/announcements\" component={AnnouncementsPage} />\n      <ProtectedRoute path=\"/analytics\" component={AnalyticsPage} />\n      <ProtectedRoute path=\"/profile\" component={ProfileSettings} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" storageKey=\"edusphere-theme\">\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <WebSocketProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </WebSocketProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2621},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3%);\n  --foreground: hsl(240, 50%, 96%);\n  --card: hsl(240, 10%, 6%);\n  --card-foreground: hsl(240, 50%, 96%);\n  --popover: hsl(240, 10%, 6%);\n  --popover-foreground: hsl(240, 50%, 96%);\n  --primary: hsl(195, 100%, 55%);\n  --primary-foreground: hsl(240, 10%, 3%);\n  --secondary: hsl(277, 85%, 60%);\n  --secondary-foreground: hsl(240, 50%, 96%);\n  --muted: hsl(240, 5%, 15%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(324, 70%, 68%);\n  --accent-foreground: hsl(240, 10%, 3%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(240, 50%, 96%);\n  --border: hsl(240, 6%, 20%);\n  --input: hsl(240, 6%, 20%);\n  --ring: hsl(195, 100%, 55%);\n  --chart-1: hsl(195, 100%, 55%);\n  --chart-2: hsl(277, 85%, 60%);\n  --chart-3: hsl(324, 70%, 68%);\n  --chart-4: hsl(159, 100%, 36%);\n  --chart-5: hsl(42, 93%, 56%);\n  --sidebar: hsl(240, 10%, 6%);\n  --sidebar-foreground: hsl(240, 50%, 96%);\n  --sidebar-primary: hsl(195, 100%, 55%);\n  --sidebar-primary-foreground: hsl(240, 10%, 3%);\n  --sidebar-accent: hsl(240, 5%, 15%);\n  --sidebar-accent-foreground: hsl(195, 100%, 55%);\n  --sidebar-border: hsl(240, 6%, 20%);\n  --sidebar-ring: hsl(195, 100%, 55%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3%);\n  --primary: hsl(195, 100%, 45%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(277, 85%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(324, 70%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 85%, 50%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(195, 100%, 45%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: radial-gradient(ellipse at center, hsl(240, 10%, 6%) 0%, hsl(240, 10%, 3%) 100%);\n    min-height: 100vh;\n  }\n\n  body.light {\n    background: radial-gradient(ellipse at center, hsl(210, 40%, 98%) 0%, hsl(0, 0%, 100%) 100%);\n  }\n}\n\n@layer components {\n  .glass-morphism {\n    background: rgba(26, 26, 46, 0.6);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .light .glass-morphism {\n    background: rgba(255, 255, 255, 0.8);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n  }\n\n  .neon-glow {\n    box-shadow: 0 0 20px hsl(195, 100%, 55%, 0.3), 0 0 40px hsl(195, 100%, 55%, 0.1);\n  }\n\n  .neon-border {\n    border: 1px solid hsl(195, 100%, 55%, 0.5);\n    box-shadow: 0 0 10px hsl(195, 100%, 55%, 0.3);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(195, 100%, 55%), hsl(277, 85%, 60%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .chart-container {\n    position: relative;\n    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(139, 92, 246, 0.1));\n    border-radius: 12px;\n    padding: 20px;\n  }\n}\n\n@layer utilities {\n  @keyframes glow {\n    from { \n      box-shadow: 0 0 20px hsl(195, 100%, 55%, 0.5), 0 0 60px hsl(195, 100%, 55%, 0.2); \n    }\n    to { \n      box-shadow: 0 0 30px hsl(195, 100%, 55%, 0.8), 0 0 80px hsl(195, 100%, 55%, 0.4); \n    }\n  }\n\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px); \n    }\n    50% { \n      transform: translateY(-10px); \n    }\n  }\n\n  @keyframes pulse-slow {\n    0%, 100% { \n      opacity: 1; \n    }\n    50% { \n      opacity: 0.5; \n    }\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse-slow 3s ease-in-out infinite;\n  }\n}\n","size_bytes":4233},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/context/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"light\") {\n      root.classList.add(\"light\");\n    } else {\n      root.classList.add(\"dark\");\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1456},"client/src/context/websocket-context.tsx":{"content":"import React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\ninterface WebSocketContextType {\n  isConnected: boolean;\n  sendMessage: (message: any) => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport function WebSocketProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      // Authenticate the WebSocket connection\n      ws.send(JSON.stringify({\n        type: 'auth',\n        userId: user.id,\n        role: user.role\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        handleWebSocketMessage(message);\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      ws.close();\n      wsRef.current = null;\n    };\n  }, [user]);\n\n  const handleWebSocketMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'new_course':\n        toast({\n          title: \"New Course Available!\",\n          description: `${message.data.title} has been added.`,\n        });\n        break;\n      case 'new_assignment':\n        toast({\n          title: \"New Assignment!\",\n          description: `${message.data.title} has been posted.`,\n        });\n        break;\n      case 'new_announcement':\n        toast({\n          title: \"New Announcement\",\n          description: message.data.title,\n        });\n        break;\n      case 'grade_updated':\n        toast({\n          title: \"Grade Updated\",\n          description: \"You have received a new grade.\",\n        });\n        break;\n      case 'timetable_updated':\n        toast({\n          title: \"Schedule Updated\",\n          description: \"Your timetable has been updated.\",\n        });\n        break;\n      case 'new_submission':\n        toast({\n          title: \"New Submission\",\n          description: \"A student has submitted an assignment.\",\n        });\n        break;\n    }\n  };\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider value={{ isConnected, sendMessage }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error(\"useWebSocket must be used within WebSocketProvider\");\n  }\n  return context;\n}\n","size_bytes":3257},"client/src/contexts/theme-context.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"dark\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"dark\" ? \"light\" : \"dark\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1134},"client/src/contexts/websocket-context.tsx":{"content":"import React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\ninterface WebSocketContextType {\n  isConnected: boolean;\n  sendMessage: (message: any) => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport function WebSocketProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      // Authenticate the WebSocket connection\n      ws.send(JSON.stringify({\n        type: 'auth',\n        userId: user.id,\n        role: user.role\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        handleWebSocketMessage(message);\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      ws.close();\n      wsRef.current = null;\n    };\n  }, [user]);\n\n  const handleWebSocketMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'new_course':\n        toast({\n          title: \"New Course Available!\",\n          description: `${message.data.title} has been added.`,\n        });\n        break;\n      case 'new_assignment':\n        toast({\n          title: \"New Assignment!\",\n          description: `${message.data.title} has been posted.`,\n        });\n        break;\n      case 'new_announcement':\n        toast({\n          title: \"New Announcement\",\n          description: message.data.title,\n        });\n        break;\n      case 'grade_updated':\n        toast({\n          title: \"Grade Updated\",\n          description: \"You have received a new grade.\",\n        });\n        break;\n      case 'timetable_updated':\n        toast({\n          title: \"Schedule Updated\",\n          description: \"Your timetable has been updated.\",\n        });\n        break;\n      case 'new_submission':\n        toast({\n          title: \"New Submission\",\n          description: \"A student has submitted an assignment.\",\n        });\n        break;\n    }\n  };\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider value={{ isConnected, sendMessage }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error(\"useWebSocket must be used within WebSocketProvider\");\n  }\n  return context;\n}\n","size_bytes":3257},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import { useState, useEffect } from \"react\"\nimport type { ReactNode } from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: ReactNode\n  description?: ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = useState<State>(memoryState)\n\n  useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3923},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Role-based routing: redirect users from root path to their appropriate dashboards\n  if (path === \"/\" && user.role) {\n    return (\n      <Route path={path}>\n        {user.role === \"teacher\" && <Redirect to=\"/teacher\" />}\n        {user.role === \"parent\" && <Redirect to=\"/parent\" />}\n        {user.role === \"student\" && <Component />}\n      </Route>\n    );\n  }\n\n  return (\n    <Route path={path}>\n      <Component />\n    </Route>\n  );\n}\n","size_bytes":1090},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\nexport interface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n    \n    ws.current.onopen = () => {\n      setIsConnected(true);\n    };\n    \n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n    \n    ws.current.onclose = () => {\n      setIsConnected(false);\n    };\n    \n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}\n","size_bytes":1407},"client/src/pages/announcements-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { motion } from \"framer-motion\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useState } from \"react\";\nimport { \n  Megaphone,\n  Search,\n  Filter,\n  Bell,\n  Info,\n  AlertTriangle,\n  Trophy,\n  BookOpen,\n  Calendar,\n  User\n} from \"lucide-react\";\n\nexport default function AnnouncementsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\n\n  const { data: announcements = [] } = useQuery({\n    queryKey: [\"/api/announcements\"],\n  });\n\n  const getAnnouncementIcon = (title: string, isGlobal: boolean) => {\n    const lowerTitle = title.toLowerCase();\n    if (lowerTitle.includes('assignment')) return Megaphone;\n    if (lowerTitle.includes('achievement') || lowerTitle.includes('congratulations')) return Trophy;\n    if (lowerTitle.includes('schedule') || lowerTitle.includes('class')) return Calendar;\n    if (lowerTitle.includes('course')) return BookOpen;\n    if (lowerTitle.includes('urgent') || lowerTitle.includes('important')) return AlertTriangle;\n    if (isGlobal) return Bell;\n    return Info;\n  };\n\n  const getAnnouncementColor = (title: string, isGlobal: boolean) => {\n    const lowerTitle = title.toLowerCase();\n    if (lowerTitle.includes('assignment')) return { icon: \"text-primary\", bg: \"bg-primary/20\", border: \"border-l-primary\" };\n    if (lowerTitle.includes('achievement')) return { icon: \"text-green-400\", bg: \"bg-green-400/20\", border: \"border-l-green-400\" };\n    if (lowerTitle.includes('urgent')) return { icon: \"text-destructive\", bg: \"bg-destructive/20\", border: \"border-l-destructive\" };\n    if (isGlobal) return { icon: \"text-secondary\", bg: \"bg-secondary/20\", border: \"border-l-secondary\" };\n    return { icon: \"text-accent\", bg: \"bg-accent/20\", border: \"border-l-accent\" };\n  };\n\n  const filteredAnnouncements = announcements.filter((announcement: any) => {\n    const matchesSearch = announcement.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         announcement.content.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    if (selectedFilter === \"all\") return matchesSearch;\n    if (selectedFilter === \"global\") return matchesSearch && announcement.isGlobal;\n    if (selectedFilter === \"course\") return matchesSearch && !announcement.isGlobal && announcement.courseName;\n    if (selectedFilter === \"urgent\") return matchesSearch && announcement.title.toLowerCase().includes('urgent');\n    \n    return matchesSearch;\n  });\n\n  const groupedAnnouncements = {\n    today: filteredAnnouncements.filter((a: any) => {\n      const today = new Date();\n      const announcementDate = new Date(a.createdAt);\n      return announcementDate.toDateString() === today.toDateString();\n    }),\n    thisWeek: filteredAnnouncements.filter((a: any) => {\n      const today = new Date();\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const announcementDate = new Date(a.createdAt);\n      return announcementDate > weekAgo && announcementDate.toDateString() !== today.toDateString();\n    }),\n    older: filteredAnnouncements.filter((a: any) => {\n      const today = new Date();\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const announcementDate = new Date(a.createdAt);\n      return announcementDate <= weekAgo;\n    })\n  };\n\n  const renderAnnouncementCard = (announcement: any, index: number) => {\n    const Icon = getAnnouncementIcon(announcement.title, announcement.isGlobal);\n    const colors = getAnnouncementColor(announcement.title, announcement.isGlobal);\n    \n    return (\n      <motion.div\n        key={announcement.id}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: index * 0.1 }}\n        className={`glass-morphism rounded-lg p-4 border-l-4 ${colors.border} hover:neon-border transition-all duration-300`}\n        data-testid={`announcement-${announcement.id}`}\n      >\n        <div className=\"flex items-start space-x-4\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${colors.bg}`}>\n            <Icon className={`w-6 h-6 ${colors.icon}`} />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <h3 className=\"font-semibold text-lg leading-tight\">{announcement.title}</h3>\n              <div className=\"flex items-center space-x-2 ml-4\">\n                {announcement.isGlobal && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    <Bell className=\"w-3 h-3 mr-1\" />\n                    Global\n                  </Badge>\n                )}\n                {announcement.courseName && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {announcement.courseName}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            \n            <p className=\"text-muted-foreground mb-3 leading-relaxed\">\n              {announcement.content}\n            </p>\n            \n            <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <User className=\"w-4 h-4\" />\n                <span>{announcement.authorName}</span>\n              </div>\n              <span>{formatDistanceToNow(new Date(announcement.createdAt))} ago</span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Announcements</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Stay updated with the latest news and important information\n            </p>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search announcements...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-announcements\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-muted-foreground\" />\n              <select\n                value={selectedFilter}\n                onChange={(e) => setSelectedFilter(e.target.value)}\n                className=\"bg-input border border-border rounded-md px-3 py-2 text-sm\"\n                data-testid=\"select-filter\"\n              >\n                <option value=\"all\">All</option>\n                <option value=\"global\">Global</option>\n                <option value=\"course\">Course Specific</option>\n                <option value=\"urgent\">Urgent</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-primary\">{announcements.length}</p>\n              <p className=\"text-xs text-muted-foreground\">Total</p>\n            </div>\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-secondary\">{groupedAnnouncements.today.length}</p>\n              <p className=\"text-xs text-muted-foreground\">Today</p>\n            </div>\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-accent\">{announcements.filter((a: any) => a.isGlobal).length}</p>\n              <p className=\"text-xs text-muted-foreground\">Global</p>\n            </div>\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-green-400\">{announcements.filter((a: any) => !a.isGlobal).length}</p>\n              <p className=\"text-xs text-muted-foreground\">Course Specific</p>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Announcements List */}\n        <Tabs defaultValue=\"timeline\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 lg:w-[400px]\">\n            <TabsTrigger value=\"timeline\">Timeline View</TabsTrigger>\n            <TabsTrigger value=\"category\">By Category</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"timeline\" className=\"space-y-6\">\n            {/* Today */}\n            {groupedAnnouncements.today.length > 0 && (\n              <GlassCard className=\"p-6 neon-glow\">\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  <GradientText>Today</GradientText>\n                </h2>\n                <div className=\"space-y-4\">\n                  {groupedAnnouncements.today.map((announcement, index) => \n                    renderAnnouncementCard(announcement, index)\n                  )}\n                </div>\n              </GlassCard>\n            )}\n\n            {/* This Week */}\n            {groupedAnnouncements.thisWeek.length > 0 && (\n              <GlassCard className=\"p-6 neon-glow\">\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  <GradientText>This Week</GradientText>\n                </h2>\n                <div className=\"space-y-4\">\n                  {groupedAnnouncements.thisWeek.map((announcement, index) => \n                    renderAnnouncementCard(announcement, index)\n                  )}\n                </div>\n              </GlassCard>\n            )}\n\n            {/* Older */}\n            {groupedAnnouncements.older.length > 0 && (\n              <GlassCard className=\"p-6 neon-glow\">\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  <GradientText>Earlier</GradientText>\n                </h2>\n                <div className=\"space-y-4\">\n                  {groupedAnnouncements.older.map((announcement, index) => \n                    renderAnnouncementCard(announcement, index)\n                  )}\n                </div>\n              </GlassCard>\n            )}\n\n            {filteredAnnouncements.length === 0 && (\n              <GlassCard className=\"p-12 neon-glow\">\n                <div className=\"text-center\">\n                  <Megaphone className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No announcements found</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchTerm ? \"Try adjusting your search terms.\" : \"Check back later for new announcements.\"}\n                  </p>\n                </div>\n              </GlassCard>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"category\" className=\"space-y-6\">\n            {/* Global Announcements */}\n            <GlassCard className=\"p-6 neon-glow\">\n              <h2 className=\"text-xl font-semibold mb-4\">\n                <GradientText className=\"flex items-center gap-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  Global Announcements\n                </GradientText>\n              </h2>\n              <div className=\"space-y-4\">\n                {filteredAnnouncements.filter((a: any) => a.isGlobal).length > 0 ? (\n                  filteredAnnouncements\n                    .filter((a: any) => a.isGlobal)\n                    .map((announcement, index) => renderAnnouncementCard(announcement, index))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">No global announcements</p>\n                )}\n              </div>\n            </GlassCard>\n\n            {/* Course Specific */}\n            <GlassCard className=\"p-6 neon-glow\">\n              <h2 className=\"text-xl font-semibold mb-4\">\n                <GradientText className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Course Specific\n                </GradientText>\n              </h2>\n              <div className=\"space-y-4\">\n                {filteredAnnouncements.filter((a: any) => !a.isGlobal).length > 0 ? (\n                  filteredAnnouncements\n                    .filter((a: any) => !a.isGlobal)\n                    .map((announcement, index) => renderAnnouncementCard(announcement, index))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">No course-specific announcements</p>\n                )}\n              </div>\n            </GlassCard>\n          </TabsContent>\n        </Tabs>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":13543},"client/src/pages/assignments-page.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { motion } from \"framer-motion\";\nimport { format } from \"date-fns\";\nimport { useState } from \"react\";\nimport { z } from \"zod\";\n// Extended assignment type that includes submission data from API joins\ntype AssignmentWithSubmission = {\n  id: string;\n  title: string;\n  description: string | null;\n  courseId: string;\n  dueDate: Date | string;\n  maxPoints: number | null;\n  courseTitle?: string;\n  status?: \"pending\" | \"submitted\" | \"graded\" | null;\n  grade?: number | null;\n  feedback?: string | null;\n  submittedAt?: Date | string | null;\n  gradedAt?: Date | string | null;\n  createdAt?: Date | null;\n  updatedAt?: Date | null;\n};\nimport { \n  Calendar, \n  Clock, \n  FileText, \n  CheckCircle, \n  AlertTriangle,\n  Upload,\n  Eye,\n  Star\n} from \"lucide-react\";\n\nconst submissionSchema = z.object({\n  content: z.string().min(1, \"Assignment content is required\"),\n  attachments: z.array(z.string()).optional(),\n});\n\ntype SubmissionFormData = z.infer<typeof submissionSchema>;\n\nexport default function AssignmentsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedAssignment, setSelectedAssignment] = useState<any>(null);\n  const [submitDialogOpen, setSubmitDialogOpen] = useState(false);\n  const [gradeDialogOpen, setGradeDialogOpen] = useState(false);\n\n  const { data: assignments = [] } = useQuery<AssignmentWithSubmission[]>({\n    queryKey: [\"/api/assignments\"],\n    enabled: !!user,\n  });\n\n  // Assignment submission mutation\n  const submitAssignmentMutation = useMutation({\n    mutationFn: async ({ assignmentId, data }: { assignmentId: string; data: SubmissionFormData }) => {\n      const response = await fetch(`/api/assignments/${assignmentId}/submit`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to submit assignment\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      setSubmitDialogOpen(false);\n      setSelectedAssignment(null);\n      toast({\n        title: \"Success\",\n        description: \"Assignment submitted successfully!\",\n      });\n      submissionForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit assignment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Submission form\n  const submissionForm = useForm<SubmissionFormData>({\n    resolver: zodResolver(submissionSchema),\n    defaultValues: {\n      content: \"\",\n      attachments: [],\n    },\n  });\n\n  const onSubmitAssignment = (data: SubmissionFormData) => {\n    if (selectedAssignment) {\n      submitAssignmentMutation.mutate({\n        assignmentId: selectedAssignment.id,\n        data,\n      });\n    }\n  };\n\n  // Click handlers\n  const handleSubmitClick = (assignment: any) => {\n    setSelectedAssignment(assignment);\n    setSubmitDialogOpen(true);\n  };\n\n  const handleViewGradeClick = (assignment: any) => {\n    setSelectedAssignment(assignment);\n    setGradeDialogOpen(true);\n  };\n\n  const getStatusColor = (status: string, dueDate: string) => {\n    const isOverdue = new Date(dueDate) < new Date();\n    if (status === \"graded\") return \"text-green-400\";\n    if (status === \"submitted\") return \"text-blue-400\";\n    if (isOverdue) return \"text-destructive\";\n    return \"text-yellow-400\";\n  };\n\n  const getStatusIcon = (status: string, dueDate: string) => {\n    const isOverdue = new Date(dueDate) < new Date();\n    if (status === \"graded\") return <CheckCircle className=\"h-4 w-4 text-green-400\" />;\n    if (status === \"submitted\") return <FileText className=\"h-4 w-4 text-blue-400\" />;\n    if (isOverdue) return <AlertTriangle className=\"h-4 w-4 text-destructive\" />;\n    return <Clock className=\"h-4 w-4 text-yellow-400\" />;\n  };\n\n  const getStatusText = (status: string, dueDate: string) => {\n    const isOverdue = new Date(dueDate) < new Date();\n    if (status === \"graded\") return \"Graded\";\n    if (status === \"submitted\") return \"Submitted\";\n    if (isOverdue) return \"Overdue\";\n    return \"Pending\";\n  };\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Assignments</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track your assignments and submit your work\n            </p>\n          </div>\n        </div>\n\n        {/* Assignment Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <GlassCard className=\"p-4 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total</p>\n                <p className=\"text-2xl font-bold text-primary\">{assignments.length}</p>\n              </div>\n              <FileText className=\"h-8 w-8 text-primary\" />\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-4 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending</p>\n                <p className=\"text-2xl font-bold text-yellow-400\">\n                  {assignments.filter((a) => !a.status || a.status === \"pending\").length}\n                </p>\n              </div>\n              <Clock className=\"h-8 w-8 text-yellow-400\" />\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-4 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Submitted</p>\n                <p className=\"text-2xl font-bold text-blue-400\">\n                  {assignments.filter((a) => a.status === \"submitted\").length}\n                </p>\n              </div>\n              <FileText className=\"h-8 w-8 text-blue-400\" />\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-4 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Graded</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  {assignments.filter((a) => a.status === \"graded\").length}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Assignments List */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <h2 className=\"text-xl font-semibold mb-6\">\n            <GradientText>All Assignments</GradientText>\n          </h2>\n          \n          <div className=\"space-y-4\">\n            {assignments.length > 0 ? (\n              assignments.map((assignment) => (\n                <motion.div\n                  key={assignment.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"glass-morphism rounded-lg p-4 hover:neon-border transition-all duration-300\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        {getStatusIcon(assignment.status ?? 'pending', assignment.dueDate ?? '')}\n                        <h3 className=\"font-semibold\">{assignment.title}</h3>\n                        <Badge variant=\"outline\" className={getStatusColor(assignment.status ?? 'pending', assignment.dueDate ?? '')}>\n                          {getStatusText(assignment.status ?? 'pending', assignment.dueDate ?? '')}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        {assignment.courseTitle}\n                      </p>\n                      \n                      {assignment.description && (\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          {assignment.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Due: {format(new Date(assignment.dueDate), \"MMM d, yyyy 'at' h:mm a\")}\n                        </div>\n                        {assignment.maxPoints && (\n                          <div>\n                            Max Points: {assignment.maxPoints}\n                          </div>\n                        )}\n                        {assignment.grade && (\n                          <div className=\"text-green-400\">\n                            Grade: {assignment.grade}/{assignment.maxPoints}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 ml-4\">\n                      {assignment.status === \"graded\" ? (\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleViewGradeClick(assignment)}\n                          data-testid={`button-view-grade-${assignment.id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View Grade\n                        </Button>\n                      ) : assignment.status === \"submitted\" ? (\n                        <Badge variant=\"secondary\">\n                          Submitted {assignment.submittedAt && format(new Date(assignment.submittedAt), \"MMM d\")}\n                        </Badge>\n                      ) : (\n                        <NeonButton \n                          size=\"sm\" \n                          neon\n                          onClick={() => handleSubmitClick(assignment)}\n                          data-testid={`button-submit-${assignment.id}`}\n                        >\n                          <Upload className=\"h-4 w-4 mr-1\" />\n                          Submit\n                        </NeonButton>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {assignment.status === \"submitted\" && (\n                    <div className=\"mt-4 pt-4 border-t border-border\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Submitted on</span>\n                        <span>{assignment.submittedAt && format(new Date(assignment.submittedAt), \"MMM d, yyyy 'at' h:mm a\")}</span>\n                      </div>\n                    </div>\n                  )}\n                </motion.div>\n              ))\n            ) : (\n              <div className=\"text-center py-12\">\n                <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No assignments yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Your assignments will appear here when teachers create them.\n                </p>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Assignment Submission Dialog */}\n        <Dialog open={submitDialogOpen} onOpenChange={setSubmitDialogOpen}>\n          <DialogContent className=\"glass-morphism border-neon max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                <GradientText>Submit Assignment</GradientText>\n              </DialogTitle>\n              {selectedAssignment && (\n                <p className=\"text-sm text-muted-foreground\">\n                  {selectedAssignment.title} • Due: {format(new Date(selectedAssignment.dueDate), \"MMM d, yyyy 'at' h:mm a\")}\n                </p>\n              )}\n            </DialogHeader>\n            <Form {...submissionForm}>\n              <form onSubmit={submissionForm.handleSubmit(onSubmitAssignment)} className=\"space-y-4\">\n                <FormField\n                  control={submissionForm.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assignment Content</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter your assignment content, answers, or notes here...\" \n                          {...field} \n                          data-testid=\"textarea-assignment-content\"\n                          className=\"glass-morphism min-h-[200px]\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={submissionForm.control}\n                  name=\"attachments\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>File Attachments (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"file\" \n                          multiple\n                          accept=\".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png\"\n                          onChange={(e) => {\n                            const files = Array.from(e.target.files || []);\n                            field.onChange(files.map(f => f.name));\n                          }}\n                          data-testid=\"input-assignment-files\"\n                          className=\"glass-morphism\"\n                        />\n                      </FormControl>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Supported formats: PDF, DOC, DOCX, TXT, JPG, PNG (Max 10MB each)\n                      </p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setSubmitDialogOpen(false)}\n                    data-testid=\"button-cancel-submission\"\n                  >\n                    Cancel\n                  </Button>\n                  <NeonButton \n                    type=\"submit\" \n                    neon \n                    disabled={submitAssignmentMutation.isPending}\n                    data-testid=\"button-confirm-submission\"\n                  >\n                    {submitAssignmentMutation.isPending ? \"Submitting...\" : \"Submit Assignment\"}\n                  </NeonButton>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Grade Viewing Dialog */}\n        <Dialog open={gradeDialogOpen} onOpenChange={setGradeDialogOpen}>\n          <DialogContent className=\"glass-morphism border-neon\">\n            <DialogHeader>\n              <DialogTitle>\n                <GradientText>Assignment Grade</GradientText>\n              </DialogTitle>\n            </DialogHeader>\n            {selectedAssignment && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center py-6\">\n                  <div className=\"text-4xl font-bold text-primary mb-2\">\n                    {selectedAssignment.grade || 0}/{selectedAssignment.maxPoints || 100}\n                  </div>\n                  <div className=\"flex items-center justify-center gap-1 mb-4\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star \n                        key={star} \n                        className={`h-5 w-5 ${\n                          star <= Math.round((selectedAssignment.grade / selectedAssignment.maxPoints) * 5)\n                            ? \"text-yellow-400 fill-current\" \n                            : \"text-muted-foreground\"\n                        }`} \n                      />\n                    ))}\n                  </div>\n                  <div className=\"text-lg font-semibold\">\n                    {((selectedAssignment.grade / selectedAssignment.maxPoints) * 100).toFixed(1)}%\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-semibold mb-1\">Assignment</h4>\n                    <p className=\"text-sm text-muted-foreground\">{selectedAssignment.title}</p>\n                  </div>\n                  \n                  {selectedAssignment.feedback && (\n                    <div>\n                      <h4 className=\"font-semibold mb-1\">Teacher Feedback</h4>\n                      <div className=\"p-3 glass-morphism rounded-lg\">\n                        <p className=\"text-sm\">{selectedAssignment.feedback}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Submitted:</span>\n                      <p>{selectedAssignment.submittedAt && format(new Date(selectedAssignment.submittedAt), \"MMM d, yyyy\")}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Graded:</span>\n                      <p>{selectedAssignment.gradedAt && format(new Date(selectedAssignment.gradedAt), \"MMM d, yyyy\")}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => setGradeDialogOpen(false)}\n                    data-testid=\"button-close-grade\"\n                  >\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":19492},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { GraduationCap, Users, BookOpen, Heart } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginForm, setLoginForm] = useState({ email: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    role: \"student\" as \"student\" | \"teacher\" | \"parent\"\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerForm);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Authentication Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-6\">\n              <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center animate-glow\">\n                <GraduationCap className=\"text-white w-6 h-6\" />\n              </div>\n              <h1 className=\"text-2xl font-bold\">\n                <GradientText>EduSphere</GradientText>\n              </h1>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Welcome to the future of education\n            </p>\n          </div>\n\n          <GlassCard className=\"p-6\">\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 glass-morphism\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-email\">Email</Label>\n                    <Input\n                      id=\"login-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={loginForm.email}\n                      onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}\n                      required\n                      data-testid=\"input-login-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      data-testid=\"input-login-password\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"first-name\">First Name</Label>\n                      <Input\n                        id=\"first-name\"\n                        placeholder=\"John\"\n                        value={registerForm.firstName}\n                        onChange={(e) => setRegisterForm(prev => ({ ...prev, firstName: e.target.value }))}\n                        required\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"last-name\">Last Name</Label>\n                      <Input\n                        id=\"last-name\"\n                        placeholder=\"Doe\"\n                        value={registerForm.lastName}\n                        onChange={(e) => setRegisterForm(prev => ({ ...prev, lastName: e.target.value }))}\n                        required\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      placeholder=\"johndoe\"\n                      value={registerForm.username}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, username: e.target.value }))}\n                      required\n                      data-testid=\"input-username\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, email: e.target.value }))}\n                      required\n                      data-testid=\"input-register-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder=\"Create a password\"\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"role\">Role</Label>\n                    <Select \n                      value={registerForm.role} \n                      onValueChange={(value: \"student\" | \"teacher\" | \"parent\") => \n                        setRegisterForm(prev => ({ ...prev, role: value }))\n                      }\n                    >\n                      <SelectTrigger data-testid=\"select-role\">\n                        <SelectValue placeholder=\"Select your role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"student\">Student</SelectItem>\n                        <SelectItem value=\"teacher\">Teacher</SelectItem>\n                        <SelectItem value=\"parent\">Parent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={registerMutation.isPending}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </GlassCard>\n        </div>\n      </div>\n\n      {/* Right side - Hero Section */}\n      <div className=\"flex-1 glass-morphism m-4 rounded-2xl flex items-center justify-center p-8\">\n        <div className=\"text-center space-y-8\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-4xl font-bold\">\n              <GradientText>Smart Education Platform</GradientText>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-md\">\n              Experience the future of learning with AI-powered insights, \n              real-time collaboration, and personalized education paths.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-6 max-w-md mx-auto\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mx-auto\">\n                <Users className=\"text-primary w-6 h-6\" />\n              </div>\n              <h3 className=\"font-semibold\">Collaborative</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Connect students, teachers, and parents\n              </p>\n            </div>\n            \n            <div className=\"text-center space-y-2\">\n              <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center mx-auto\">\n                <BookOpen className=\"text-secondary w-6 h-6\" />\n              </div>\n              <h3 className=\"font-semibold\">Interactive</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Engaging courses and assignments\n              </p>\n            </div>\n            \n            <div className=\"text-center space-y-2\">\n              <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mx-auto\">\n                <Heart className=\"text-accent w-6 h-6\" />\n              </div>\n              <h3 className=\"font-semibold\">Wellness</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Monitor emotional health and well-being\n              </p>\n            </div>\n            \n            <div className=\"text-center space-y-2\">\n              <div className=\"w-12 h-12 bg-green-400/20 rounded-lg flex items-center justify-center mx-auto\">\n                <GraduationCap className=\"text-green-400 w-6 h-6\" />\n              </div>\n              <h3 className=\"font-semibold\">Achievement</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Track progress and celebrate success\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11022},"client/src/pages/course-player.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Play, \n  Pause, \n  SkipBack, \n  SkipForward, \n  Volume2, \n  Maximize,\n  BookOpen,\n  FileText,\n  Vote,\n  Bookmark,\n  Clock,\n  CheckCircle\n} from \"lucide-react\";\n\nexport default function CoursePlayer() {\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Course Header */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold\">\n                <GradientText>Advanced React Development</GradientText>\n              </h1>\n              <p className=\"text-muted-foreground\">Module 3: State Management with Context API</p>\n            </div>\n            <Badge variant=\"secondary\">75% Complete</Badge>\n          </div>\n          <Progress value={75} className=\"h-2\" />\n        </GlassCard>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Video Player */}\n          <div className=\"lg:col-span-3\">\n            <GlassCard className=\"p-6 neon-glow\">\n              {/* Video Container */}\n              <div className=\"aspect-video bg-black rounded-lg mb-4 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Play className=\"h-16 w-16 text-white mb-4\" />\n                  <p className=\"text-white\">Video content would load here</p>\n                </div>\n              </div>\n\n              {/* Video Controls */}\n              <div className=\"flex items-center justify-between p-4 glass-morphism rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <Button size=\"sm\" variant=\"outline\">\n                    <SkipBack className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\">\n                    <Play className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <SkipForward className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Volume2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-sm text-muted-foreground\">12:34 / 45:20</span>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Maximize className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Course Content Tabs */}\n              <Tabs defaultValue=\"overview\" className=\"mt-6\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"notes\">Notes</TabsTrigger>\n                  <TabsTrigger value=\"quiz\">Vote</TabsTrigger>\n                  <TabsTrigger value=\"resources\">Resources</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"overview\" className=\"mt-6\">\n                  <GlassCard className=\"p-4\">\n                    <h3 className=\"font-semibold mb-2\">About this lesson</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      In this lesson, we'll explore the Context API in React and learn how to manage state \n                      across multiple components without prop drilling. We'll build a practical example \n                      that demonstrates the power of React's built-in state management solution.\n                    </p>\n                  </GlassCard>\n                </TabsContent>\n                \n                <TabsContent value=\"notes\" className=\"mt-6\">\n                  <GlassCard className=\"p-4\">\n                    <h3 className=\"font-semibold mb-2\">Your Notes</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-start gap-2 p-2 glass-morphism rounded\">\n                        <Clock className=\"h-4 w-4 text-primary mt-0.5\" />\n                        <div>\n                          <p className=\"text-sm\">Context API is great for avoiding prop drilling</p>\n                          <p className=\"text-xs text-muted-foreground\">at 5:23</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-2 p-2 glass-morphism rounded\">\n                        <Bookmark className=\"h-4 w-4 text-accent mt-0.5\" />\n                        <div>\n                          <p className=\"text-sm\">Remember to use useContext hook</p>\n                          <p className=\"text-xs text-muted-foreground\">at 12:45</p>\n                        </div>\n                      </div>\n                    </div>\n                  </GlassCard>\n                </TabsContent>\n                \n                <TabsContent value=\"quiz\" className=\"mt-6\">\n                  <GlassCard className=\"p-4\">\n                    <h3 className=\"font-semibold mb-2\">Knowledge Check</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Test your understanding of the Context API concepts covered in this lesson.\n                    </p>\n                    <Button>\n                      <Vote className=\"mr-2 h-4 w-4\" />\n                      Start Vote\n                    </Button>\n                  </GlassCard>\n                </TabsContent>\n                \n                <TabsContent value=\"resources\" className=\"mt-6\">\n                  <GlassCard className=\"p-4\">\n                    <h3 className=\"font-semibold mb-2\">Additional Resources</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 p-2 glass-morphism rounded hover:neon-border transition-all cursor-pointer\">\n                        <FileText className=\"h-4 w-4 text-primary\" />\n                        <span className=\"text-sm\">React Context API Documentation</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 p-2 glass-morphism rounded hover:neon-border transition-all cursor-pointer\">\n                        <BookOpen className=\"h-4 w-4 text-secondary\" />\n                        <span className=\"text-sm\">State Management Best Practices</span>\n                      </div>\n                    </div>\n                  </GlassCard>\n                </TabsContent>\n              </Tabs>\n            </GlassCard>\n          </div>\n\n          {/* Course Playlist */}\n          <div>\n            <GlassCard className=\"p-6 neon-glow\">\n              <h3 className=\"font-semibold mb-4\">\n                <GradientText>Course Content</GradientText>\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-3 p-3 glass-morphism rounded-lg\">\n                  <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Introduction to React</p>\n                    <p className=\"text-xs text-muted-foreground\">15 min</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-3 p-3 glass-morphism rounded-lg\">\n                  <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Components & Props</p>\n                    <p className=\"text-xs text-muted-foreground\">25 min</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-3 p-3 glass-morphism rounded-lg neon-border\">\n                  <Play className=\"h-4 w-4 text-primary\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">State Management</p>\n                    <p className=\"text-xs text-muted-foreground\">45 min</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-3 p-3 glass-morphism rounded-lg opacity-50\">\n                  <div className=\"h-4 w-4 rounded-full border-2 border-muted\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Effects & Lifecycle</p>\n                    <p className=\"text-xs text-muted-foreground\">30 min</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-3 p-3 glass-morphism rounded-lg opacity-50\">\n                  <div className=\"h-4 w-4 rounded-full border-2 border-muted\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Custom Hooks</p>\n                    <p className=\"text-xs text-muted-foreground\">20 min</p>\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n          </div>\n        </div>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":9553},"client/src/pages/emotion-monitor-page.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { motion } from \"framer-motion\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Brain,\n  Camera,\n  Mic,\n  Heart,\n  Smile,\n  Frown,\n  Zap,\n  Target,\n  HelpCircle,\n  TrendingUp,\n  Save\n} from \"lucide-react\";\n\nexport default function EmotionMonitorPage() {\n  const { toast } = useToast();\n  const [newEmotion, setNewEmotion] = useState({\n    emotion: \"\",\n    intensity: [5],\n    context: \"\"\n  });\n\n  const { data: emotions = [] } = useQuery({\n    queryKey: [\"/api/emotions\"],\n  });\n\n  const recordEmotionMutation = useMutation({\n    mutationFn: async (emotionData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/emotions\", {\n        ...emotionData,\n        intensity: emotionData.intensity[0]\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emotions\"] });\n      setNewEmotion({ emotion: \"\", intensity: [5], context: \"\" });\n      toast({\n        title: \"Emotion Recorded\",\n        description: \"Your emotional state has been logged successfully.\",\n      });\n    },\n  });\n\n  const emotionIcons = {\n    happy: { icon: Smile, color: \"text-green-400\", bg: \"bg-green-400/20\" },\n    sad: { icon: Frown, color: \"text-blue-400\", bg: \"bg-blue-400/20\" },\n    stressed: { icon: Zap, color: \"text-red-400\", bg: \"bg-red-400/20\" },\n    focused: { icon: Target, color: \"text-primary\", bg: \"bg-primary/20\" },\n    confused: { icon: HelpCircle, color: \"text-yellow-400\", bg: \"bg-yellow-400/20\" },\n    excited: { icon: TrendingUp, color: \"text-accent\", bg: \"bg-accent/20\" },\n  };\n\n  const getEmotionStats = () => {\n    if (emotions.length === 0) return { dominant: \"Unknown\", average: 0, trend: \"stable\" };\n    \n    const recentEmotions = emotions.slice(0, 10);\n    const emotionCounts = recentEmotions.reduce((acc: any, emotion: any) => {\n      acc[emotion.emotion] = (acc[emotion.emotion] || 0) + 1;\n      return acc;\n    }, {});\n    \n    const dominant = Object.keys(emotionCounts).reduce((a, b) => \n      emotionCounts[a] > emotionCounts[b] ? a : b\n    ) || \"Unknown\";\n    \n    const average = recentEmotions.reduce((sum: number, emotion: any) => sum + emotion.intensity, 0) / recentEmotions.length || 0;\n    \n    return { dominant, average: Math.round(average), trend: \"improving\" };\n  };\n\n  const stats = getEmotionStats();\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Wellness Monitor</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track your emotional well-being and mental state\n            </p>\n          </div>\n        </div>\n\n        {/* AI Detection Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText className=\"flex items-center gap-3\">\n                <Brain className=\"h-6 w-6\" />\n                AI Emotion Detection\n              </GradientText>\n            </h2>\n            \n            <div className=\"space-y-6\">\n              {/* Camera Detection */}\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-full h-48 bg-black rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center text-white\">\n                    <Camera className=\"h-12 w-12 mx-auto mb-4\" />\n                    <p>Camera feed for emotion detection</p>\n                    <p className=\"text-sm opacity-70\">Feature ready for AI integration</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-center space-x-4\">\n                  <Button className=\"bg-primary/20 hover:bg-primary/30\">\n                    <Camera className=\"mr-2 h-4 w-4\" />\n                    Start Camera\n                  </Button>\n                  <Button variant=\"outline\">\n                    <Mic className=\"mr-2 h-4 w-4\" />\n                    Voice Analysis\n                  </Button>\n                </div>\n              </div>\n\n              {/* Current Detection */}\n              <GlassCard className=\"p-4\">\n                <h3 className=\"font-semibold mb-3\">Current Detection</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Emotion</span>\n                    <Badge variant=\"secondary\">Analyzing...</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Confidence</span>\n                    <span className=\"text-sm\">--</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Stress Level</span>\n                    <span className=\"text-sm\">--</span>\n                  </div>\n                </div>\n              </GlassCard>\n            </div>\n          </GlassCard>\n\n          {/* Manual Entry */}\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText className=\"flex items-center gap-3\">\n                <Heart className=\"h-6 w-6\" />\n                Manual Entry\n              </GradientText>\n            </h2>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Current Emotion</label>\n                <Select \n                  value={newEmotion.emotion} \n                  onValueChange={(value) => setNewEmotion(prev => ({ ...prev, emotion: value }))}\n                >\n                  <SelectTrigger data-testid=\"select-emotion\">\n                    <SelectValue placeholder=\"Select your emotion\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"happy\">😊 Happy</SelectItem>\n                    <SelectItem value=\"sad\">😢 Sad</SelectItem>\n                    <SelectItem value=\"stressed\">😰 Stressed</SelectItem>\n                    <SelectItem value=\"focused\">🎯 Focused</SelectItem>\n                    <SelectItem value=\"confused\">😕 Confused</SelectItem>\n                    <SelectItem value=\"excited\">🚀 Excited</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">\n                  Intensity Level: {newEmotion.intensity[0]}\n                </label>\n                <Slider\n                  value={newEmotion.intensity}\n                  onValueChange={(value) => setNewEmotion(prev => ({ ...prev, intensity: value }))}\n                  min={1}\n                  max={10}\n                  step={1}\n                  className=\"w-full\"\n                  data-testid=\"slider-intensity\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                  <span>Low</span>\n                  <span>High</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Context (optional)</label>\n                <Textarea\n                  placeholder=\"What were you doing? (e.g., studying, taking a break, in class)\"\n                  value={newEmotion.context}\n                  onChange={(e) => setNewEmotion(prev => ({ ...prev, context: e.target.value }))}\n                  data-testid=\"textarea-context\"\n                />\n              </div>\n\n              <Button \n                className=\"w-full\"\n                onClick={() => recordEmotionMutation.mutate(newEmotion)}\n                disabled={!newEmotion.emotion || recordEmotionMutation.isPending}\n                data-testid=\"button-record-emotion\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {recordEmotionMutation.isPending ? \"Recording...\" : \"Record Emotion\"}\n              </Button>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Dominant Emotion</p>\n                <p className=\"text-2xl font-bold text-primary capitalize\">{stats.dominant}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <Heart className=\"w-6 h-6 text-primary\" />\n              </div>\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Average Intensity</p>\n                <p className=\"text-2xl font-bold text-secondary\">{stats.average}/10</p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-secondary\" />\n              </div>\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Entries</p>\n                <p className=\"text-2xl font-bold text-accent\">{emotions.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center\">\n                <Brain className=\"w-6 h-6 text-accent\" />\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Emotion History */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <h2 className=\"text-xl font-semibold mb-6\">\n            <GradientText>Emotion History</GradientText>\n          </h2>\n          \n          <div className=\"space-y-4\">\n            {emotions.length > 0 ? (\n              emotions.slice(0, 10).map((emotion: any, index: number) => {\n                const EmotionIcon = emotionIcons[emotion.emotion as keyof typeof emotionIcons]?.icon || Heart;\n                const iconColor = emotionIcons[emotion.emotion as keyof typeof emotionIcons]?.color || \"text-primary\";\n                const iconBg = emotionIcons[emotion.emotion as keyof typeof emotionIcons]?.bg || \"bg-primary/20\";\n                \n                return (\n                  <motion.div\n                    key={emotion.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"flex items-center space-x-4 p-4 glass-morphism rounded-lg\"\n                  >\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${iconBg}`}>\n                      <EmotionIcon className={`w-6 h-6 ${iconColor}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold capitalize\">{emotion.emotion}</h3>\n                        <Badge variant=\"outline\">Intensity: {emotion.intensity}/10</Badge>\n                      </div>\n                      {emotion.context && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">{emotion.context}</p>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(new Date(emotion.detectedAt), \"MMM d, h:mm a\")}\n                      </p>\n                    </div>\n                  </motion.div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-12\">\n                <Brain className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No emotion data yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Start tracking your emotions to see insights and patterns.\n                </p>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":13411},"client/src/pages/emotion-monitor.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { motion } from \"framer-motion\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Brain,\n  Camera,\n  Mic,\n  Heart,\n  Smile,\n  Frown,\n  Zap,\n  Target,\n  HelpCircle,\n  TrendingUp,\n  Save\n} from \"lucide-react\";\n\nexport default function EmotionMonitor() {\n  const { toast } = useToast();\n  const [newEmotion, setNewEmotion] = useState({\n    emotion: \"\",\n    intensity: [5],\n    context: \"\"\n  });\n\n  const { data: emotions = [] } = useQuery({\n    queryKey: [\"/api/emotions\"],\n  });\n\n  const recordEmotionMutation = useMutation({\n    mutationFn: async (emotionData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/emotions\", {\n        ...emotionData,\n        intensity: emotionData.intensity[0]\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emotions\"] });\n      setNewEmotion({ emotion: \"\", intensity: [5], context: \"\" });\n      toast({\n        title: \"Emotion Recorded\",\n        description: \"Your emotional state has been logged successfully.\",\n      });\n    },\n  });\n\n  const emotionIcons = {\n    happy: { icon: Smile, color: \"text-green-400\", bg: \"bg-green-400/20\" },\n    sad: { icon: Frown, color: \"text-blue-400\", bg: \"bg-blue-400/20\" },\n    stressed: { icon: Zap, color: \"text-red-400\", bg: \"bg-red-400/20\" },\n    focused: { icon: Target, color: \"text-primary\", bg: \"bg-primary/20\" },\n    confused: { icon: HelpCircle, color: \"text-yellow-400\", bg: \"bg-yellow-400/20\" },\n    excited: { icon: TrendingUp, color: \"text-accent\", bg: \"bg-accent/20\" },\n  };\n\n  const getEmotionStats = () => {\n    if (emotions.length === 0) return { dominant: \"Unknown\", average: 0, trend: \"stable\" };\n    \n    const recentEmotions = emotions.slice(0, 10);\n    const emotionCounts = recentEmotions.reduce((acc: any, emotion: any) => {\n      acc[emotion.emotion] = (acc[emotion.emotion] || 0) + 1;\n      return acc;\n    }, {});\n    \n    const dominant = Object.keys(emotionCounts).reduce((a, b) => \n      emotionCounts[a] > emotionCounts[b] ? a : b\n    ) || \"Unknown\";\n    \n    const average = recentEmotions.reduce((sum: number, emotion: any) => sum + emotion.intensity, 0) / recentEmotions.length || 0;\n    \n    return { dominant, average: Math.round(average), trend: \"improving\" };\n  };\n\n  const stats = getEmotionStats();\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Wellness Monitor</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track your emotional well-being and mental state\n            </p>\n          </div>\n        </div>\n\n        {/* AI Detection Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText className=\"flex items-center gap-3\">\n                <Brain className=\"h-6 w-6\" />\n                AI Emotion Detection\n              </GradientText>\n            </h2>\n            \n            <div className=\"space-y-6\">\n              {/* Camera Detection */}\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-full h-48 bg-black rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center text-white\">\n                    <Camera className=\"h-12 w-12 mx-auto mb-4\" />\n                    <p>Camera feed for emotion detection</p>\n                    <p className=\"text-sm opacity-70\">Feature ready for AI integration</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-center space-x-4\">\n                  <Button className=\"bg-primary/20 hover:bg-primary/30\" data-testid=\"button-start-camera\">\n                    <Camera className=\"mr-2 h-4 w-4\" />\n                    Start Camera\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-voice-analysis\">\n                    <Mic className=\"mr-2 h-4 w-4\" />\n                    Voice Analysis\n                  </Button>\n                </div>\n              </div>\n\n              {/* Current Detection */}\n              <GlassCard className=\"p-4\">\n                <h3 className=\"font-semibold mb-3\">Current Detection</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Emotion</span>\n                    <Badge variant=\"secondary\">Analyzing...</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Confidence</span>\n                    <span className=\"text-sm\">--</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Stress Level</span>\n                    <span className=\"text-sm\">--</span>\n                  </div>\n                </div>\n              </GlassCard>\n            </div>\n          </GlassCard>\n\n          {/* Manual Entry */}\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText className=\"flex items-center gap-3\">\n                <Heart className=\"h-6 w-6\" />\n                Manual Entry\n              </GradientText>\n            </h2>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Current Emotion</label>\n                <Select \n                  value={newEmotion.emotion} \n                  onValueChange={(value) => setNewEmotion(prev => ({ ...prev, emotion: value }))}\n                >\n                  <SelectTrigger data-testid=\"select-emotion\">\n                    <SelectValue placeholder=\"Select your emotion\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"happy\">😊 Happy</SelectItem>\n                    <SelectItem value=\"sad\">😢 Sad</SelectItem>\n                    <SelectItem value=\"stressed\">😰 Stressed</SelectItem>\n                    <SelectItem value=\"focused\">🎯 Focused</SelectItem>\n                    <SelectItem value=\"confused\">😕 Confused</SelectItem>\n                    <SelectItem value=\"excited\">🚀 Excited</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">\n                  Intensity Level: {newEmotion.intensity[0]}\n                </label>\n                <Slider\n                  value={newEmotion.intensity}\n                  onValueChange={(value) => setNewEmotion(prev => ({ ...prev, intensity: value }))}\n                  min={1}\n                  max={10}\n                  step={1}\n                  className=\"w-full\"\n                  data-testid=\"slider-intensity\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                  <span>Low</span>\n                  <span>High</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Context (optional)</label>\n                <Textarea\n                  placeholder=\"What were you doing? (e.g., studying, taking a break, in class)\"\n                  value={newEmotion.context}\n                  onChange={(e) => setNewEmotion(prev => ({ ...prev, context: e.target.value }))}\n                  data-testid=\"textarea-context\"\n                />\n              </div>\n\n              <Button \n                className=\"w-full\"\n                onClick={() => recordEmotionMutation.mutate(newEmotion)}\n                disabled={!newEmotion.emotion || recordEmotionMutation.isPending}\n                data-testid=\"button-record-emotion\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {recordEmotionMutation.isPending ? \"Recording...\" : \"Record Emotion\"}\n              </Button>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Dominant Emotion</p>\n                <p className=\"text-2xl font-bold text-primary capitalize\">{stats.dominant}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <Heart className=\"w-6 h-6 text-primary\" />\n              </div>\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Average Intensity</p>\n                <p className=\"text-2xl font-bold text-secondary\">{stats.average}/10</p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-secondary\" />\n              </div>\n            </div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Entries</p>\n                <p className=\"text-2xl font-bold text-accent\">{emotions.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center\">\n                <Brain className=\"w-6 h-6 text-accent\" />\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Emotion History */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <h2 className=\"text-xl font-semibold mb-6\">\n            <GradientText>Emotion History</GradientText>\n          </h2>\n          \n          <div className=\"space-y-4\">\n            {emotions.length > 0 ? (\n              emotions.slice(0, 10).map((emotion: any, index: number) => {\n                const EmotionIcon = emotionIcons[emotion.emotion as keyof typeof emotionIcons]?.icon || Heart;\n                const iconColor = emotionIcons[emotion.emotion as keyof typeof emotionIcons]?.color || \"text-primary\";\n                const iconBg = emotionIcons[emotion.emotion as keyof typeof emotionIcons]?.bg || \"bg-primary/20\";\n                \n                return (\n                  <motion.div\n                    key={emotion.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"flex items-center space-x-4 p-4 glass-morphism rounded-lg\"\n                    data-testid={`emotion-entry-${emotion.id}`}\n                  >\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${iconBg}`}>\n                      <EmotionIcon className={`w-6 h-6 ${iconColor}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold capitalize\">{emotion.emotion}</h3>\n                        <Badge variant=\"outline\">Intensity: {emotion.intensity}/10</Badge>\n                      </div>\n                      {emotion.context && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">{emotion.context}</p>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(new Date(emotion.detectedAt), \"MMM d, h:mm a\")}\n                      </p>\n                    </div>\n                  </motion.div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-12\">\n                <Brain className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No emotion data yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Start tracking your emotions to see insights and patterns.\n                </p>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":13541},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notices-announcements.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { motion } from \"framer-motion\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useState } from \"react\";\nimport { \n  Megaphone,\n  Search,\n  Filter,\n  Bell,\n  Info,\n  AlertTriangle,\n  Trophy,\n  BookOpen,\n  Calendar,\n  User\n} from \"lucide-react\";\n\nexport default function NoticesAnnouncements() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\n\n  const { data: announcements = [] } = useQuery({\n    queryKey: [\"/api/announcements\"],\n  });\n\n  const getAnnouncementIcon = (title: string, isGlobal: boolean) => {\n    const lowerTitle = title.toLowerCase();\n    if (lowerTitle.includes('assignment')) return Megaphone;\n    if (lowerTitle.includes('achievement') || lowerTitle.includes('congratulations')) return Trophy;\n    if (lowerTitle.includes('schedule') || lowerTitle.includes('class')) return Calendar;\n    if (lowerTitle.includes('course')) return BookOpen;\n    if (lowerTitle.includes('urgent') || lowerTitle.includes('important')) return AlertTriangle;\n    if (isGlobal) return Bell;\n    return Info;\n  };\n\n  const getAnnouncementColor = (title: string, isGlobal: boolean) => {\n    const lowerTitle = title.toLowerCase();\n    if (lowerTitle.includes('assignment')) return { icon: \"text-primary\", bg: \"bg-primary/20\", border: \"border-l-primary\" };\n    if (lowerTitle.includes('achievement')) return { icon: \"text-green-400\", bg: \"bg-green-400/20\", border: \"border-l-green-400\" };\n    if (lowerTitle.includes('urgent')) return { icon: \"text-destructive\", bg: \"bg-destructive/20\", border: \"border-l-destructive\" };\n    if (isGlobal) return { icon: \"text-secondary\", bg: \"bg-secondary/20\", border: \"border-l-secondary\" };\n    return { icon: \"text-accent\", bg: \"bg-accent/20\", border: \"border-l-accent\" };\n  };\n\n  const filteredAnnouncements = announcements.filter((announcement: any) => {\n    const matchesSearch = announcement.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         announcement.content.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    if (selectedFilter === \"all\") return matchesSearch;\n    if (selectedFilter === \"global\") return matchesSearch && announcement.isGlobal;\n    if (selectedFilter === \"course\") return matchesSearch && !announcement.isGlobal && announcement.courseName;\n    if (selectedFilter === \"urgent\") return matchesSearch && announcement.title.toLowerCase().includes('urgent');\n    \n    return matchesSearch;\n  });\n\n  const groupedAnnouncements = {\n    today: filteredAnnouncements.filter((a: any) => {\n      const today = new Date();\n      const announcementDate = new Date(a.createdAt);\n      return announcementDate.toDateString() === today.toDateString();\n    }),\n    thisWeek: filteredAnnouncements.filter((a: any) => {\n      const today = new Date();\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const announcementDate = new Date(a.createdAt);\n      return announcementDate > weekAgo && announcementDate.toDateString() !== today.toDateString();\n    }),\n    older: filteredAnnouncements.filter((a: any) => {\n      const today = new Date();\n      const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const announcementDate = new Date(a.createdAt);\n      return announcementDate <= weekAgo;\n    })\n  };\n\n  const renderAnnouncementCard = (announcement: any, index: number) => {\n    const Icon = getAnnouncementIcon(announcement.title, announcement.isGlobal);\n    const colors = getAnnouncementColor(announcement.title, announcement.isGlobal);\n    \n    return (\n      <motion.div\n        key={announcement.id}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: index * 0.1 }}\n        className={`glass-morphism rounded-lg p-4 border-l-4 ${colors.border} hover:neon-border transition-all duration-300`}\n        data-testid={`announcement-${announcement.id}`}\n      >\n        <div className=\"flex items-start space-x-4\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${colors.bg}`}>\n            <Icon className={`w-6 h-6 ${colors.icon}`} />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <h3 className=\"font-semibold text-lg leading-tight\">{announcement.title}</h3>\n              <div className=\"flex items-center space-x-2 ml-4\">\n                {announcement.isGlobal && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    <Bell className=\"w-3 h-3 mr-1\" />\n                    Global\n                  </Badge>\n                )}\n                {announcement.courseName && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {announcement.courseName}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            \n            <p className=\"text-muted-foreground mb-3 leading-relaxed\">\n              {announcement.content}\n            </p>\n            \n            <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <User className=\"w-4 h-4\" />\n                <span>{announcement.authorName}</span>\n              </div>\n              <span>{formatDistanceToNow(new Date(announcement.createdAt))} ago</span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Announcements</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Stay updated with the latest news and important information\n            </p>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search announcements...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-announcements\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-muted-foreground\" />\n              <select\n                value={selectedFilter}\n                onChange={(e) => setSelectedFilter(e.target.value)}\n                className=\"bg-input border border-border rounded-md px-3 py-2 text-sm\"\n                data-testid=\"select-filter\"\n              >\n                <option value=\"all\">All</option>\n                <option value=\"global\">Global</option>\n                <option value=\"course\">Course Specific</option>\n                <option value=\"urgent\">Urgent</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-primary\">{announcements.length}</p>\n              <p className=\"text-xs text-muted-foreground\">Total</p>\n            </div>\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-secondary\">{groupedAnnouncements.today.length}</p>\n              <p className=\"text-xs text-muted-foreground\">Today</p>\n            </div>\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-accent\">{announcements.filter((a: any) => a.isGlobal).length}</p>\n              <p className=\"text-xs text-muted-foreground\">Global</p>\n            </div>\n            <div className=\"text-center p-3 glass-morphism rounded-lg\">\n              <p className=\"text-2xl font-bold text-green-400\">{announcements.filter((a: any) => !a.isGlobal).length}</p>\n              <p className=\"text-xs text-muted-foreground\">Course Specific</p>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Announcements List */}\n        <Tabs defaultValue=\"timeline\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 lg:w-[400px]\">\n            <TabsTrigger value=\"timeline\">Timeline View</TabsTrigger>\n            <TabsTrigger value=\"category\">By Category</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"timeline\" className=\"space-y-6\">\n            {/* Today */}\n            {groupedAnnouncements.today.length > 0 && (\n              <GlassCard className=\"p-6 neon-glow\">\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  <GradientText>Today</GradientText>\n                </h2>\n                <div className=\"space-y-4\">\n                  {groupedAnnouncements.today.map((announcement, index) => \n                    renderAnnouncementCard(announcement, index)\n                  )}\n                </div>\n              </GlassCard>\n            )}\n\n            {/* This Week */}\n            {groupedAnnouncements.thisWeek.length > 0 && (\n              <GlassCard className=\"p-6 neon-glow\">\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  <GradientText>This Week</GradientText>\n                </h2>\n                <div className=\"space-y-4\">\n                  {groupedAnnouncements.thisWeek.map((announcement, index) => \n                    renderAnnouncementCard(announcement, index)\n                  )}\n                </div>\n              </GlassCard>\n            )}\n\n            {/* Older */}\n            {groupedAnnouncements.older.length > 0 && (\n              <GlassCard className=\"p-6 neon-glow\">\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  <GradientText>Earlier</GradientText>\n                </h2>\n                <div className=\"space-y-4\">\n                  {groupedAnnouncements.older.map((announcement, index) => \n                    renderAnnouncementCard(announcement, index)\n                  )}\n                </div>\n              </GlassCard>\n            )}\n\n            {filteredAnnouncements.length === 0 && (\n              <GlassCard className=\"p-12 neon-glow\">\n                <div className=\"text-center\">\n                  <Megaphone className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No announcements found</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchTerm ? \"Try adjusting your search terms.\" : \"Check back later for new announcements.\"}\n                  </p>\n                </div>\n              </GlassCard>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"category\" className=\"space-y-6\">\n            {/* Global Announcements */}\n            <GlassCard className=\"p-6 neon-glow\">\n              <h2 className=\"text-xl font-semibold mb-4\">\n                <GradientText className=\"flex items-center gap-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  Global Announcements\n                </GradientText>\n              </h2>\n              <div className=\"space-y-4\">\n                {filteredAnnouncements.filter((a: any) => a.isGlobal).length > 0 ? (\n                  filteredAnnouncements\n                    .filter((a: any) => a.isGlobal)\n                    .map((announcement, index) => renderAnnouncementCard(announcement, index))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">No global announcements</p>\n                )}\n              </div>\n            </GlassCard>\n\n            {/* Course Specific */}\n            <GlassCard className=\"p-6 neon-glow\">\n              <h2 className=\"text-xl font-semibold mb-4\">\n                <GradientText className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Course Specific\n                </GradientText>\n              </h2>\n              <div className=\"space-y-4\">\n                {filteredAnnouncements.filter((a: any) => !a.isGlobal).length > 0 ? (\n                  filteredAnnouncements\n                    .filter((a: any) => !a.isGlobal)\n                    .map((announcement, index) => renderAnnouncementCard(announcement, index))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">No course-specific announcements</p>\n                )}\n              </div>\n            </GlassCard>\n          </TabsContent>\n        </Tabs>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":13546},"client/src/pages/parent-dashboard.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { GraduationCap, Calendar, Heart, TrendingUp, AlertTriangle, CheckCircle, User } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface Child {\n  id: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\ninterface Assignment {\n  id: string;\n  title: string;\n  status: string | null;\n  grade: number | null;\n  maxPoints: number;\n  dueDate: string;\n  courseTitle: string;\n  submittedAt: string | null;\n}\n\ninterface Course {\n  id: string;\n  title: string;\n  progress: number;\n}\n\ninterface Emotion {\n  id: string;\n  mood: string;\n  energy: number;\n  confidence: number;\n  stress: number;\n  focus: number;\n  detectedAt: string;\n}\n\nexport default function ParentDashboard() {\n  const [selectedChildId, setSelectedChildId] = useState<string>(\"\");\n\n  // Fetch children\n  const { data: children = [], isLoading: childrenLoading } = useQuery<Child[]>({\n    queryKey: ['/api/children'],\n  });\n\n  // Fetch selected child's data\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: ['/api/children', selectedChildId, 'assignments'],\n    enabled: !!selectedChildId,\n  });\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: ['/api/children', selectedChildId, 'courses'],\n    enabled: !!selectedChildId,\n  });\n\n  const { data: emotions = [], isLoading: emotionsLoading } = useQuery<Emotion[]>({\n    queryKey: ['/api/children', selectedChildId, 'emotions'],\n    enabled: !!selectedChildId,\n  });\n\n  // Set default child selection safely\n  useEffect(() => {\n    if (children.length > 0 && !selectedChildId) {\n      setSelectedChildId(children[0].id);\n    }\n  }, [children, selectedChildId]);\n\n  const selectedChild = children.find(child => child.id === selectedChildId);\n\n  // Calculate stats from real data\n  const getStats = () => {\n    const gradedAssignments = assignments.filter(a => a.grade !== null);\n    const totalGrade = gradedAssignments.reduce((sum, a) => sum + (a.grade || 0), 0);\n    const overallGrade = gradedAssignments.length > 0 ? Math.round(totalGrade / gradedAssignments.length) : 0;\n    \n    const pendingAssignments = assignments.filter(a => a.status === 'pending' || a.status === null);\n    const avgProgress = courses.length > 0 ? Math.round(courses.reduce((sum, c) => sum + (c.progress || 0), 0) / courses.length) : 0;\n\n    // Calculate attendance rate based on comprehensive student engagement metrics\n    // Uses assignment submission patterns, course progress, and timing patterns as attendance indicators\n    const submittedAssignments = assignments.filter(a => a.submittedAt !== null);\n    const onTimeSubmissions = assignments.filter(a => {\n      if (!a.submittedAt || !a.dueDate) return false;\n      return new Date(a.submittedAt) <= new Date(a.dueDate);\n    });\n    \n    let attendanceRate = 0;\n    if (assignments.length > 0 && courses.length > 0) {\n      // Combination of submission rate (60%), on-time rate (30%), and course progress (10%)\n      const submissionRate = (submittedAssignments.length / assignments.length) * 60;\n      const onTimeRate = assignments.length > 0 ? (onTimeSubmissions.length / assignments.length) * 30 : 0;\n      const progressRate = (avgProgress / 100) * 10;\n      attendanceRate = Math.round(submissionRate + onTimeRate + progressRate);\n    } else if (courses.length > 0) {\n      // If only courses, use progress as attendance indicator\n      attendanceRate = Math.round(avgProgress * 0.8); // Slightly lower since no assignment data\n    }\n\n    return [\n      {\n        title: \"Overall Grade\",\n        value: gradedAssignments.length > 0 ? `${overallGrade}%` : \"No grades yet\",\n        icon: GraduationCap,\n        color: \"primary\" as const,\n        trend: gradedAssignments.length > 0 ? (overallGrade >= 70 ? \"+good\" : \"needs improvement\") : \"0\"\n      },\n      {\n        title: \"Attendance Rate\",\n        value: assignments.length > 0 ? `${attendanceRate}%` : \"No data\",\n        icon: Calendar,\n        color: \"secondary\" as const,\n        trend: assignments.length > 0 ? (attendanceRate >= 80 ? \"+excellent\" : attendanceRate >= 60 ? \"+good\" : \"needs attention\") : \"0\"\n      },\n      {\n        title: \"Active Courses\",\n        value: courses.length.toString(),\n        icon: TrendingUp,\n        color: \"accent\" as const,\n        trend: courses.length > 0 ? `${courses.length} enrolled` : \"0\"\n      },\n      {\n        title: \"Pending Tasks\",\n        value: assignments.length > 0 ? pendingAssignments.length.toString() : \"No assignments\",\n        icon: AlertTriangle,\n        color: pendingAssignments.length === 0 ? \"green\" as const : \"orange\" as const,\n        trend: assignments.length > 0 ? (pendingAssignments.length === 0 ? \"all complete\" : `${pendingAssignments.length} pending`) : \"0\"\n      }\n    ];\n  };\n\n  const stats = getStats();\n\n  if (childrenLoading) {\n    return (\n      <MainLayout>\n        <div className=\"space-y-8 animate-pulse\" data-testid=\"loading-parent-dashboard\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"h-8 bg-muted rounded mb-4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </GlassCard>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n        data-testid=\"page-parent-dashboard\"\n      >\n        {/* Child Selection */}\n        {children.length > 0 && (\n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h1 className=\"text-2xl font-bold\">\n                <GradientText>Parent Dashboard</GradientText>\n              </h1>\n              <div className=\"flex items-center gap-4\">\n                <label className=\"text-sm font-medium\">Select Child:</label>\n                <Select \n                  value={selectedChildId} \n                  onValueChange={setSelectedChildId}\n                  data-testid=\"select-child\"\n                >\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue placeholder=\"Select a child\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {children.map((child) => (\n                      <SelectItem key={child.id} value={child.id}>\n                        {child.firstName} {child.lastName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </GlassCard>\n        )}\n\n        {/* Child Info & Stats */}\n        {selectedChild && (\n          <GlassCard className=\"p-6 neon-glow\">\n            <div className=\"mb-4\">\n              <h2 className=\"text-xl font-semibold\">\n                <GradientText className=\"flex items-center gap-3\">\n                  <User className=\"h-6 w-6\" />\n                  {selectedChild.firstName} {selectedChild.lastName}\n                </GradientText>\n              </h2>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Username: {selectedChild.username} • Email: {selectedChild.email}\n              </p>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {stats.map((stat, index) => (\n                <motion.div\n                  key={stat.title}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                >\n                  <StatsCard {...stat} />\n                </motion.div>\n              ))}\n            </div>\n          </GlassCard>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Academic Performance */}\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText className=\"flex items-center gap-3\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Academic Performance\n              </GradientText>\n            </h2>\n            {coursesLoading ? (\n              <div className=\"space-y-4 animate-pulse\">\n                {[1, 2, 3, 4].map((i) => (\n                  <div key={i} className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-2 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : courses.length > 0 ? (\n              <div className=\"space-y-4\" data-testid=\"child-courses\">\n                {courses.slice(0, 4).map((course) => {\n                  const progress = course.progress || 0;\n                  const getGrade = (progress: number) => {\n                    if (progress >= 90) return \"A+\";\n                    if (progress >= 85) return \"A\";\n                    if (progress >= 80) return \"B+\";\n                    if (progress >= 75) return \"B\";\n                    if (progress >= 70) return \"C+\";\n                    if (progress >= 65) return \"C\";\n                    return \"D\";\n                  };\n\n                  return (\n                    <div key={course.id}>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>{course.title}</span>\n                        <span className=\"font-semibold\">{getGrade(progress)}</span>\n                      </div>\n                      <Progress value={progress} className=\"h-2\" />\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">No courses enrolled yet.</p>\n            )}\n          </GlassCard>\n\n          {/* Wellness Monitor */}\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText className=\"flex items-center gap-3\">\n                <Heart className=\"h-5 w-5\" />\n                Wellness Monitor\n              </GradientText>\n            </h2>\n            {emotionsLoading ? (\n              <div className=\"space-y-4 animate-pulse\">\n                {[1, 2, 3, 4].map((i) => (\n                  <div key={i} className=\"flex items-center justify-between\">\n                    <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : emotions.length > 0 ? (\n              <div className=\"space-y-4\" data-testid=\"child-wellness\">\n                {(() => {\n                  const recentEmotion = emotions[0]; // Most recent emotion\n                  const avgEnergy = Math.round(recentEmotion.energy || 50);\n                  const avgConfidence = Math.round(recentEmotion.confidence || 50);\n                  const avgStress = Math.round(recentEmotion.stress || 50);\n                  const avgFocus = Math.round(recentEmotion.focus || 50);\n\n                  const getStatusColor = (value: number, isReverse = false) => {\n                    if (isReverse) {\n                      if (value >= 70) return \"text-red-400\";\n                      if (value >= 40) return \"text-yellow-400\";\n                      return \"text-green-400\";\n                    }\n                    if (value >= 70) return \"text-green-400\";\n                    if (value >= 40) return \"text-yellow-400\";\n                    return \"text-red-400\";\n                  };\n\n                  const getStatusText = (value: number, isReverse = false) => {\n                    if (isReverse) {\n                      if (value >= 70) return \"High\";\n                      if (value >= 40) return \"Moderate\";\n                      return \"Low\";\n                    }\n                    if (value >= 70) return \"High\";\n                    if (value >= 40) return \"Moderate\";\n                    return \"Low\";\n                  };\n\n                  return (\n                    <>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Overall Mood</span>\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-2 h-2 rounded-full animate-pulse ${getStatusColor(avgEnergy).replace('text-', 'bg-')}`}></div>\n                          <span className={`text-sm ${getStatusColor(avgEnergy)}`}>\n                            {recentEmotion.mood || getStatusText(avgEnergy)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Energy Level</span>\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-2 h-2 rounded-full animate-pulse ${getStatusColor(avgEnergy).replace('text-', 'bg-')}`}></div>\n                          <span className={`text-sm ${getStatusColor(avgEnergy)}`}>\n                            {getStatusText(avgEnergy)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Focus Level</span>\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-2 h-2 rounded-full animate-pulse ${getStatusColor(avgFocus).replace('text-', 'bg-')}`}></div>\n                          <span className={`text-sm ${getStatusColor(avgFocus)}`}>\n                            {getStatusText(avgFocus)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Stress Level</span>\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-2 h-2 rounded-full animate-pulse ${getStatusColor(avgStress, true).replace('text-', 'bg-')}`}></div>\n                          <span className={`text-sm ${getStatusColor(avgStress, true)}`}>\n                            {getStatusText(avgStress, true)}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-4 p-3 glass-morphism rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          <strong>AI Insight:</strong> {selectedChild?.firstName} is showing{\" \"}\n                          {avgStress < 30 && avgFocus > 60 ? \"excellent\" : avgStress < 50 ? \"good\" : \"moderate\"} \n                          {\" \"}wellbeing patterns. \n                          {avgStress > 60 && \" Consider encouraging more breaks to reduce stress levels.\"}\n                          {avgFocus < 40 && \" Focus support may be beneficial.\"}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Last recorded: {new Date(recentEmotion.detectedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </>\n                  );\n                })()}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">No wellness data available yet.</p>\n            )}\n          </GlassCard>\n        </div>\n\n        {/* Recent Activity & Alerts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText>Recent Activity</GradientText>\n            </h2>\n            {assignmentsLoading ? (\n              <div className=\"space-y-3 animate-pulse\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"p-3 glass-morphism rounded-lg space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : assignments.length > 0 ? (\n              <div className=\"space-y-3\" data-testid=\"child-activity\">\n                {assignments.slice(0, 5).map((assignment) => {\n                  const isSubmitted = assignment.status === 'submitted' || assignment.status === 'graded';\n                  const isGraded = assignment.status === 'graded' && assignment.grade !== null;\n                  const timeAgo = assignment.submittedAt \n                    ? `${Math.floor((new Date().getTime() - new Date(assignment.submittedAt).getTime()) / (1000 * 60 * 60))} hours ago`\n                    : 'Recently';\n\n                  return (\n                    <div key={assignment.id} className=\"flex items-start gap-3 p-3 glass-morphism rounded-lg\">\n                      {isGraded ? (\n                        <TrendingUp className=\"h-5 w-5 text-primary mt-0.5\" />\n                      ) : isSubmitted ? (\n                        <CheckCircle className=\"h-5 w-5 text-green-400 mt-0.5\" />\n                      ) : (\n                        <AlertTriangle className=\"h-5 w-5 text-yellow-400 mt-0.5\" />\n                      )}\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">\n                          {isGraded ? 'Grade Received' : isSubmitted ? 'Assignment Submitted' : 'Assignment Pending'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {assignment.title} - {assignment.courseTitle}\n                          {isGraded && assignment.grade && ` - Grade: ${Math.round((assignment.grade / assignment.maxPoints) * 100)}%`}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">{timeAgo}</p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">No recent activity available.</p>\n            )}\n          </GlassCard>\n\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText>Alerts & Notifications</GradientText>\n            </h2>\n            {assignmentsLoading ? (\n              <div className=\"space-y-3 animate-pulse\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"p-3 glass-morphism rounded-lg space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : assignments.length > 0 ? (\n              <div className=\"space-y-3\" data-testid=\"child-alerts\">\n                {(() => {\n                  const alerts = [];\n                  \n                  // Upcoming deadlines\n                  const upcomingAssignments = assignments.filter(a => {\n                    if (!a.dueDate) return false;\n                    const dueDate = new Date(a.dueDate);\n                    const now = new Date();\n                    const diffDays = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n                    return diffDays > 0 && diffDays <= 7 && (a.status === 'pending' || a.status === null);\n                  });\n\n                  upcomingAssignments.slice(0, 2).forEach(assignment => {\n                    const daysUntilDue = Math.ceil((new Date(assignment.dueDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n                    alerts.push(\n                      <div key={`deadline-${assignment.id}`} className=\"flex items-start gap-3 p-3 glass-morphism rounded-lg border-l-4 border-accent\">\n                        <AlertTriangle className=\"h-5 w-5 text-accent mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Upcoming Deadline</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {assignment.title} due in {daysUntilDue} day{daysUntilDue !== 1 ? 's' : ''}\n                          </p>\n                          <Badge variant=\"outline\" className=\"mt-1\">Important</Badge>\n                        </div>\n                      </div>\n                    );\n                  });\n\n                  // Recent achievements\n                  const recentGrades = assignments.filter(a => a.status === 'graded' && a.grade && a.grade >= (a.maxPoints * 0.85));\n                  if (recentGrades.length > 0) {\n                    const bestGrade = recentGrades[0];\n                    const percentage = Math.round((bestGrade.grade / bestGrade.maxPoints) * 100);\n                    alerts.push(\n                      <div key={`achievement-${bestGrade.id}`} className=\"flex items-start gap-3 p-3 glass-morphism rounded-lg border-l-4 border-primary\">\n                        <TrendingUp className=\"h-5 w-5 text-primary mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Great Performance!</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {selectedChild?.firstName} scored {percentage}% on {bestGrade.title}\n                          </p>\n                          <Badge variant=\"outline\" className=\"mt-1\">Achievement</Badge>\n                        </div>\n                      </div>\n                    );\n                  }\n\n                  // Course progress\n                  const activeCourses = courses.filter(c => (c.progress || 0) > 0);\n                  if (activeCourses.length > 0) {\n                    alerts.push(\n                      <div key=\"course-progress\" className=\"flex items-start gap-3 p-3 glass-morphism rounded-lg border-l-4 border-green-400\">\n                        <CheckCircle className=\"h-5 w-5 text-green-400 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Active Learning</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {selectedChild?.firstName} is enrolled in {activeCourses.length} active course{activeCourses.length !== 1 ? 's' : ''}\n                          </p>\n                          <Badge variant=\"outline\" className=\"mt-1\">Progress</Badge>\n                        </div>\n                      </div>\n                    );\n                  }\n\n                  return alerts.length > 0 ? alerts : (\n                    <p className=\"text-muted-foreground text-sm\">No alerts at this time.</p>\n                  );\n                })()}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">No alerts available.</p>\n            )}\n          </GlassCard>\n        </div>\n\n        {/* No children message */}\n        {children.length === 0 && !childrenLoading && (\n          <GlassCard className=\"p-8 neon-glow text-center\">\n            <User className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Children Linked</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              You don't have any children linked to your parent account yet.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Contact your school administrator to link your children to your account.\n            </p>\n          </GlassCard>\n        )}\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":24692},"client/src/pages/profile-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useTheme } from \"@/context/theme-context\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { motion } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User,\n  Settings,\n  Bell,\n  Shield,\n  Palette,\n  Camera,\n  Save,\n  Moon,\n  Sun,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Edit,\n  LogOut\n} from \"lucide-react\";\n\nexport default function ProfileSettings() {\n  const { user, logoutMutation } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  \n  const [profileData, setProfileData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    phone: \"\",\n    location: \"\",\n    bio: \"\",\n  });\n\n  const [notifications, setNotifications] = useState({\n    emailNotifications: true,\n    pushNotifications: true,\n    assignmentReminders: true,\n    gradeUpdates: true,\n    announcements: true,\n    weeklyReports: false,\n  });\n\n  const [privacy, setPrivacy] = useState({\n    profileVisibility: true,\n    showOnlineStatus: true,\n    allowDirectMessages: true,\n    shareProgressData: false,\n  });\n\n  const handleSaveProfile = () => {\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile information has been saved successfully.\",\n    });\n  };\n\n  const handleSaveNotifications = () => {\n    toast({\n      title: \"Notification Settings Updated\",\n      description: \"Your notification preferences have been saved.\",\n    });\n  };\n\n  const handleSavePrivacy = () => {\n    toast({\n      title: \"Privacy Settings Updated\",\n      description: \"Your privacy preferences have been saved.\",\n    });\n  };\n\n  if (!user) return null;\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Profile & Settings</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Manage your account settings and preferences\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-4 lg:w-[600px]\">\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"privacy\">Privacy</TabsTrigger>\n            <TabsTrigger value=\"appearance\">Appearance</TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <GlassCard className=\"p-6 neon-glow\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <User className=\"h-6 w-6 text-primary\" />\n                <h2 className=\"text-xl font-semibold\">\n                  <GradientText>Profile Information</GradientText>\n                </h2>\n              </div>\n\n              {/* Profile Picture */}\n              <div className=\"flex items-center space-x-6 mb-8\">\n                <div className=\"relative\">\n                  <Avatar className=\"w-24 h-24\">\n                    <AvatarImage src={user.profilePicture || undefined} />\n                    <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl\">\n                      {user.firstName[0]}{user.lastName[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <Button\n                    size=\"icon\"\n                    className=\"absolute -bottom-2 -right-2 rounded-full w-8 h-8\"\n                    data-testid=\"button-change-avatar\"\n                  >\n                    <Camera className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{user.firstName} {user.lastName}</h3>\n                  <p className=\"text-muted-foreground capitalize\">{user.role}</p>\n                  <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                </div>\n              </div>\n\n              {/* Profile Form */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={profileData.firstName}\n                    onChange={(e) => setProfileData(prev => ({ ...prev, firstName: e.target.value }))}\n                    data-testid=\"input-first-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={profileData.lastName}\n                    onChange={(e) => setProfileData(prev => ({ ...prev, lastName: e.target.value }))}\n                    data-testid=\"input-last-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profileData.email}\n                    onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={profileData.phone}\n                    onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"+1 (555) 123-4567\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    value={profileData.location}\n                    onChange={(e) => setProfileData(prev => ({ ...prev, location: e.target.value }))}\n                    placeholder=\"City, Country\"\n                    data-testid=\"input-location\"\n                  />\n                </div>\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label htmlFor=\"bio\">Bio</Label>\n                  <Textarea\n                    id=\"bio\"\n                    value={profileData.bio}\n                    onChange={(e) => setProfileData(prev => ({ ...prev, bio: e.target.value }))}\n                    placeholder=\"Tell us about yourself...\"\n                    data-testid=\"textarea-bio\"\n                  />\n                </div>\n              </div>\n\n              <Button onClick={handleSaveProfile} data-testid=\"button-save-profile\">\n                <Save className=\"mr-2 h-4 w-4\" />\n                Save Profile\n              </Button>\n            </GlassCard>\n          </TabsContent>\n\n          {/* Notifications Tab */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <GlassCard className=\"p-6 neon-glow\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <Bell className=\"h-6 w-6 text-primary\" />\n                <h2 className=\"text-xl font-semibold\">\n                  <GradientText>Notification Preferences</GradientText>\n                </h2>\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* General Notifications */}\n                <div>\n                  <h3 className=\"font-semibold mb-4\">General Notifications</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Email Notifications</p>\n                        <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                      </div>\n                      <Switch\n                        checked={notifications.emailNotifications}\n                        onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, emailNotifications: checked }))}\n                        data-testid=\"switch-email-notifications\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Push Notifications</p>\n                        <p className=\"text-sm text-muted-foreground\">Receive browser push notifications</p>\n                      </div>\n                      <Switch\n                        checked={notifications.pushNotifications}\n                        onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, pushNotifications: checked }))}\n                        data-testid=\"switch-push-notifications\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Academic Notifications */}\n                <div>\n                  <h3 className=\"font-semibold mb-4\">Academic Notifications</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Assignment Reminders</p>\n                        <p className=\"text-sm text-muted-foreground\">Get reminded about upcoming deadlines</p>\n                      </div>\n                      <Switch\n                        checked={notifications.assignmentReminders}\n                        onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, assignmentReminders: checked }))}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Grade Updates</p>\n                        <p className=\"text-sm text-muted-foreground\">Be notified when grades are posted</p>\n                      </div>\n                      <Switch\n                        checked={notifications.gradeUpdates}\n                        onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, gradeUpdates: checked }))}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Announcements</p>\n                        <p className=\"text-sm text-muted-foreground\">Get notified about new announcements</p>\n                      </div>\n                      <Switch\n                        checked={notifications.announcements}\n                        onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, announcements: checked }))}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Weekly Reports</p>\n                        <p className=\"text-sm text-muted-foreground\">Receive weekly progress summaries</p>\n                      </div>\n                      <Switch\n                        checked={notifications.weeklyReports}\n                        onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, weeklyReports: checked }))}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Button onClick={handleSaveNotifications} className=\"mt-6\">\n                <Save className=\"mr-2 h-4 w-4\" />\n                Save Notification Settings\n              </Button>\n            </GlassCard>\n          </TabsContent>\n\n          {/* Privacy Tab */}\n          <TabsContent value=\"privacy\" className=\"space-y-6\">\n            <GlassCard className=\"p-6 neon-glow\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <Shield className=\"h-6 w-6 text-primary\" />\n                <h2 className=\"text-xl font-semibold\">\n                  <GradientText>Privacy & Security</GradientText>\n                </h2>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Profile Visibility</p>\n                      <p className=\"text-sm text-muted-foreground\">Allow others to see your profile information</p>\n                    </div>\n                    <Switch\n                      checked={privacy.profileVisibility}\n                      onCheckedChange={(checked) => setPrivacy(prev => ({ ...prev, profileVisibility: checked }))}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Show Online Status</p>\n                      <p className=\"text-sm text-muted-foreground\">Let others see when you're online</p>\n                    </div>\n                    <Switch\n                      checked={privacy.showOnlineStatus}\n                      onCheckedChange={(checked) => setPrivacy(prev => ({ ...prev, showOnlineStatus: checked }))}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Allow Direct Messages</p>\n                      <p className=\"text-sm text-muted-foreground\">Allow other users to send you messages</p>\n                    </div>\n                    <Switch\n                      checked={privacy.allowDirectMessages}\n                      onCheckedChange={(checked) => setPrivacy(prev => ({ ...prev, allowDirectMessages: checked }))}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Share Progress Data</p>\n                      <p className=\"text-sm text-muted-foreground\">Allow anonymized data to be used for research</p>\n                    </div>\n                    <Switch\n                      checked={privacy.shareProgressData}\n                      onCheckedChange={(checked) => setPrivacy(prev => ({ ...prev, shareProgressData: checked }))}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Button onClick={handleSavePrivacy} className=\"mt-6\">\n                <Save className=\"mr-2 h-4 w-4\" />\n                Save Privacy Settings\n              </Button>\n            </GlassCard>\n          </TabsContent>\n\n          {/* Appearance Tab */}\n          <TabsContent value=\"appearance\" className=\"space-y-6\">\n            <GlassCard className=\"p-6 neon-glow\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <Palette className=\"h-6 w-6 text-primary\" />\n                <h2 className=\"text-xl font-semibold\">\n                  <GradientText>Appearance & Theme</GradientText>\n                </h2>\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* Theme Selection */}\n                <div>\n                  <h3 className=\"font-semibold mb-4\">Theme</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <button\n                      onClick={() => setTheme(\"light\")}\n                      className={`p-4 rounded-lg border-2 transition-all duration-300 ${\n                        theme === \"light\" \n                          ? \"border-primary bg-primary/10\" \n                          : \"border-border glass-morphism hover:border-primary/50\"\n                      }`}\n                      data-testid=\"button-light-theme\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Sun className=\"h-6 w-6\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium\">Light Mode</p>\n                          <p className=\"text-sm text-muted-foreground\">Clean and bright interface</p>\n                        </div>\n                      </div>\n                    </button>\n                    \n                    <button\n                      onClick={() => setTheme(\"dark\")}\n                      className={`p-4 rounded-lg border-2 transition-all duration-300 ${\n                        theme === \"dark\" \n                          ? \"border-primary bg-primary/10\" \n                          : \"border-border glass-morphism hover:border-primary/50\"\n                      }`}\n                      data-testid=\"button-dark-theme\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Moon className=\"h-6 w-6\" />\n                        <div className=\"text-left\">\n                          <p className=\"font-medium\">Dark Mode</p>\n                          <p className=\"text-sm text-muted-foreground\">Futuristic and easy on the eyes</p>\n                        </div>\n                      </div>\n                    </button>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Animation Settings */}\n                <div>\n                  <h3 className=\"font-semibold mb-4\">Animation & Effects</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Reduced Motion</p>\n                        <p className=\"text-sm text-muted-foreground\">Minimize animations for better performance</p>\n                      </div>\n                      <Switch />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Glassmorphism Effects</p>\n                        <p className=\"text-sm text-muted-foreground\">Enable glass-like transparency effects</p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Neon Glow Effects</p>\n                        <p className=\"text-sm text-muted-foreground\">Enable futuristic neon lighting</p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Account Actions */}\n            <GlassCard className=\"p-6 neon-glow\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <Settings className=\"h-6 w-6 text-primary\" />\n                <h2 className=\"text-xl font-semibold\">\n                  <GradientText>Account Actions</GradientText>\n                </h2>\n              </div>\n\n              <div className=\"space-y-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  onClick={() => logoutMutation.mutate()}\n                  data-testid=\"button-logout-settings\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign Out\n                </Button>\n              </div>\n            </GlassCard>\n          </TabsContent>\n        </Tabs>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":20630},"client/src/pages/student-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { CourseCard } from \"@/components/dashboard/course-card\";\nimport { AssignmentCard } from \"@/components/dashboard/assignment-card\";\nimport { TimetableWidget } from \"@/components/dashboard/timetable-widget\";\nimport { AnnouncementCard } from \"@/components/dashboard/announcement-card\";\nimport { WellnessMonitor } from \"@/components/dashboard/wellness-monitor\";\nimport { PerformanceChart } from \"@/components/dashboard/performance-chart\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { motion } from \"framer-motion\";\nimport { Plus, BookOpen, ClipboardList, Calendar } from \"lucide-react\";\nimport type { Course, Assignment, Announcement, TimetableEntry } from \"@shared/schema\";\n\nexport default function StudentDashboard() {\n  const { user } = useAuth();\n\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n    enabled: !!user,\n  });\n\n  const { data: assignments = [] } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n    enabled: !!user,\n  });\n\n  const { data: announcements = [] } = useQuery<Announcement[]>({\n    queryKey: [\"/api/announcements\"],\n    enabled: !!user,\n  });\n\n  const { data: timetable = [] } = useQuery<TimetableEntry[]>({\n    queryKey: [\"/api/timetable\"],\n    enabled: !!user,\n  });\n\n  const stats = [\n    {\n      title: \"Course Progress\",\n      value: \"87%\",\n      icon: BookOpen,\n      color: \"primary\",\n      trend: \"+5%\"\n    },\n    {\n      title: \"Active Courses\",\n      value: courses.length.toString(),\n      icon: BookOpen,\n      color: \"secondary\",\n      trend: \"+2\"\n    },\n    {\n      title: \"Pending Tasks\",\n      value: assignments.filter((a: any) => !a.status || a.status === \"pending\").length.toString(),\n      icon: ClipboardList,\n      color: \"accent\",\n      trend: \"-1\"\n    },\n    {\n      title: \"Average Grade\",\n      value: \"A+\",\n      icon: Calendar,\n      color: \"green\",\n      trend: \"+0.2\"\n    }\n  ];\n\n  const upcomingAssignments = assignments\n    .filter((a: any) => !a.status || a.status === \"pending\")\n    .slice(0, 3);\n\n  const recentAnnouncements = announcements.slice(0, 3);\n\n  return (\n    <MainLayout>\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {stats.map((stat, index) => (\n          <motion.div\n            key={stat.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: index * 0.1 }}\n          >\n            <StatsCard {...stat} />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n        {/* Recent Courses */}\n        <div className=\"lg:col-span-2\">\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText>Continue Learning</GradientText>\n            </h2>\n            <div className=\"space-y-4\">\n              {courses.length > 0 ? (\n                courses.slice(0, 3).map((course: any) => (\n                  <CourseCard key={course.id} course={course} />\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No courses enrolled yet</p>\n                </div>\n              )}\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Upcoming Deadlines */}\n        <div>\n          <GlassCard className=\"p-6 neon-glow\">\n            <h2 className=\"text-xl font-semibold mb-6\">\n              <GradientText>Upcoming Deadlines</GradientText>\n            </h2>\n            <div className=\"space-y-4\">\n              {upcomingAssignments.length > 0 ? (\n                upcomingAssignments.map((assignment: any) => (\n                  <AssignmentCard key={assignment.id} assignment={assignment} />\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <ClipboardList className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No pending assignments</p>\n                </div>\n              )}\n            </div>\n            <NeonButton className=\"w-full mt-4\" variant=\"outline\" neon>\n              View All Assignments\n            </NeonButton>\n          </GlassCard>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        {/* Performance Chart */}\n        <PerformanceChart />\n        \n        {/* Wellness Monitor */}\n        <WellnessMonitor />\n      </div>\n\n      {/* Timetable */}\n      <TimetableWidget timetable={timetable} />\n\n      {/* Recent Announcements */}\n      <GlassCard className=\"p-6 neon-glow\">\n        <h2 className=\"text-xl font-semibold mb-6\">\n          <GradientText>Recent Announcements</GradientText>\n        </h2>\n        <div className=\"space-y-4\">\n          {recentAnnouncements.length > 0 ? (\n            recentAnnouncements.map((announcement: any) => (\n              <AnnouncementCard key={announcement.id} announcement={announcement} />\n            ))\n          ) : (\n            <div className=\"text-center py-8\">\n              <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">No announcements yet</p>\n            </div>\n          )}\n        </div>\n        <NeonButton className=\"w-full mt-6\" variant=\"outline\" neon>\n          View All Announcements\n        </NeonButton>\n      </GlassCard>\n\n      {/* Floating Action Button */}\n      <motion.button\n        className=\"fixed bottom-6 right-6 w-14 h-14 bg-primary text-primary-foreground rounded-full shadow-lg hover:scale-110 transition-transform duration-300 animate-glow z-50\"\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.95 }}\n        data-testid=\"button-floating-action\"\n      >\n        <Plus className=\"w-6 h-6 mx-auto\" />\n      </motion.button>\n    </MainLayout>\n  );\n}\n","size_bytes":6368},"client/src/pages/teacher-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCourseSchema, insertAssignmentSchema, insertAnnouncementSchema, insertTimetableSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { motion } from \"framer-motion\";\nimport { Plus, Users, BookOpen, ClipboardCheck, TrendingUp, Upload, Eye, Megaphone, CalendarDays } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\ntype CourseFormData = z.infer<typeof insertCourseSchema>;\ntype AssignmentFormData = z.infer<typeof insertAssignmentSchema>;\ntype AnnouncementFormData = z.infer<typeof insertAnnouncementSchema>;\ntype TimetableFormData = z.infer<typeof insertTimetableSchema>;\n\nexport default function TeacherDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [createCourseOpen, setCreateCourseOpen] = useState(false);\n  const [createAssignmentOpen, setCreateAssignmentOpen] = useState(false);\n  const [createAnnouncementOpen, setCreateAnnouncementOpen] = useState(false);\n  const [createTimetableOpen, setCreateTimetableOpen] = useState(false);\n\n  const { data: courses = [] } = useQuery<any[]>({\n    queryKey: [\"/api/courses\"],\n    enabled: !!user,\n  });\n\n  const { data: analytics = {} } = useQuery<any>({\n    queryKey: [\"/api/teacher/analytics\"],\n    enabled: !!user && user.role === \"teacher\",\n  });\n\n  // Course creation mutation\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: CourseFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/courses\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/analytics\"] });\n      setCreateCourseOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Course created successfully!\",\n      });\n      courseForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create course. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createTimetableMutation = useMutation({\n    mutationFn: async (data: TimetableFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/timetable\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/timetable\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/analytics\"] });\n      setCreateTimetableOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Timetable entry created successfully!\",\n      });\n      timetableForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create timetable entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Course form\n  const courseForm = useForm<CourseFormData>({\n    resolver: zodResolver(insertCourseSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n    },\n  });\n\n  // Assignment creation mutation\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: AssignmentFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/assignments\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/analytics\"] });\n      setCreateAssignmentOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Assignment created successfully!\",\n      });\n      assignmentForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create assignment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Assignment form\n  const assignmentForm = useForm<AssignmentFormData>({\n    resolver: zodResolver(insertAssignmentSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      courseId: \"\",\n      dueDate: new Date(),\n      maxPoints: 100 as number,\n    },\n  });\n\n  // Announcement creation mutation\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async (data: AnnouncementFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/announcements\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/analytics\"] });\n      setCreateAnnouncementOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Announcement created successfully!\",\n      });\n      announcementForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create announcement. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Announcement form\n  const announcementForm = useForm<AnnouncementFormData>({\n    resolver: zodResolver(insertAnnouncementSchema.omit({ authorId: true })),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      courseId: \"\",\n      isGlobal: false,\n    },\n  });\n\n  const timetableForm = useForm<TimetableFormData>({\n    resolver: zodResolver(insertTimetableSchema),\n    defaultValues: {\n      courseId: \"\",\n      title: \"\",\n      dayOfWeek: 1, // Monday\n      startTime: \"\",\n      endTime: \"\",\n      location: \"\",\n    },\n  });\n\n  const onCreateCourse = (data: CourseFormData) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const onCreateAssignment = (data: AssignmentFormData) => {\n    createAssignmentMutation.mutate(data);\n  };\n\n  const onCreateAnnouncement = (data: AnnouncementFormData) => {\n    // Since course selection was removed, set courseId to null for global announcements\n    const announcementData = {\n      ...data,\n      courseId: null\n    };\n    createAnnouncementMutation.mutate(announcementData);\n  };\n\n  const onCreateTimetable = (data: TimetableFormData) => {\n    createTimetableMutation.mutate(data);\n  };\n\n  // Click handlers\n  const handleCreateCourse = () => setCreateCourseOpen(true);\n  const handleCreateAssignment = () => setCreateAssignmentOpen(true);\n  const handleCreateAnnouncement = () => setCreateAnnouncementOpen(true);\n  const handleCreateTimetable = () => setCreateTimetableOpen(true);\n  const handleManageStudents = () => setLocation(\"/students\");\n  const handleViewAnalytics = () => setLocation(\"/analytics\");\n  const handleManageCourse = (courseId: string) => setLocation(`/courses/${courseId}/manage`);\n\n  const stats = [\n    {\n      title: \"Active Courses\",\n      value: courses.length.toString(),\n      icon: BookOpen,\n      color: \"primary\",\n      trend: \"+2\"\n    },\n    {\n      title: \"Total Students\",\n      value: analytics?.totalStudents?.toString() || \"0\",\n      icon: Users,\n      color: \"secondary\",\n      trend: analytics?.totalStudents > 0 ? `+${analytics.totalStudents}` : \"0\"\n    },\n    {\n      title: \"Assignments Graded\",\n      value: analytics?.assignmentsGraded?.toString() || \"0\",\n      icon: ClipboardCheck,\n      color: \"accent\",\n      trend: analytics?.assignmentsGraded > 0 ? `+${analytics.assignmentsGraded}` : \"0\"\n    },\n    {\n      title: \"Average Grade\",\n      value: analytics?.averageGrade?.toString() || \"0\",\n      icon: TrendingUp,\n      color: \"green\",\n      trend: analytics?.averageGrade > 0 ? `${analytics.averageGrade}/10` : \"N/A\"\n    }\n  ];\n\n  return (\n    <MainLayout>\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {stats.map((stat, index) => (\n          <motion.div\n            key={stat.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: index * 0.1 }}\n          >\n            <StatsCard {...stat} />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        {/* Course Management */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <h2 className=\"text-xl font-semibold mb-6\">\n            <GradientText>My Courses</GradientText>\n          </h2>\n          <div className=\"space-y-4\">\n            {courses.length > 0 ? (\n              courses.map((course: any) => (\n                <GlassCard key={course.id} className=\"p-4 hover:neon-border transition-all duration-300\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold\">{course.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{course.description}</p>\n                    </div>\n                    <NeonButton size=\"sm\" neon onClick={() => handleManageCourse(course.id)} data-testid={`button-manage-course-${course.id}`}>\n                      Manage\n                    </NeonButton>\n                  </div>\n                </GlassCard>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No courses created yet</p>\n                <NeonButton className=\"mt-4\" neon onClick={handleCreateCourse} data-testid=\"button-create-first-course\">\n                  Create First Course\n                </NeonButton>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Quick Actions */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <h2 className=\"text-xl font-semibold mb-6\">\n            <GradientText>Quick Actions</GradientText>\n          </h2>\n          <div className=\"space-y-4\">\n            <NeonButton className=\"w-full justify-start\" variant=\"outline\" neon onClick={handleCreateCourse} data-testid=\"button-create-course\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create New Course\n            </NeonButton>\n            <NeonButton className=\"w-full justify-start\" variant=\"outline\" neon onClick={handleCreateAssignment} data-testid=\"button-create-assignment\">\n              <ClipboardCheck className=\"mr-2 h-4 w-4\" />\n              Create Assignment\n            </NeonButton>\n            <NeonButton className=\"w-full justify-start\" variant=\"outline\" neon onClick={handleCreateAnnouncement} data-testid=\"button-create-announcement\">\n              <Megaphone className=\"mr-2 h-4 w-4\" />\n              Add Announcement\n            </NeonButton>\n            <NeonButton className=\"w-full justify-start\" variant=\"outline\" neon onClick={handleCreateTimetable} data-testid=\"button-create-timetable\">\n              <CalendarDays className=\"mr-2 h-4 w-4\" />\n              Add Timetable Entry\n            </NeonButton>\n            <NeonButton className=\"w-full justify-start\" variant=\"outline\" neon onClick={handleManageStudents} data-testid=\"button-manage-students\">\n              <Users className=\"mr-2 h-4 w-4\" />\n              Manage Students\n            </NeonButton>\n            <NeonButton className=\"w-full justify-start\" variant=\"outline\" neon onClick={handleViewAnalytics} data-testid=\"button-view-analytics\">\n              <TrendingUp className=\"mr-2 h-4 w-4\" />\n              View Analytics\n            </NeonButton>\n          </div>\n        </GlassCard>\n      </div>\n\n      {/* Recent Activity */}\n      <GlassCard className=\"p-6 neon-glow\">\n        <h2 className=\"text-xl font-semibold mb-6\">\n          <GradientText>Recent Activity</GradientText>\n        </h2>\n        {analytics?.recentActivity && analytics.recentActivity.length > 0 ? (\n          <div className=\"space-y-4\">\n            {analytics.recentActivity.map((activity: any, index: number) => (\n              <div key={activity.id || index} className=\"flex items-center justify-between p-3 glass-morphism rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <ClipboardCheck className=\"h-5 w-5 text-primary\" />\n                  <div>\n                    <p className=\"font-medium\">{activity.studentName} submitted {activity.assignmentTitle}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Status: {activity.status} • {new Date(activity.timestamp).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No recent activity</p>\n          </div>\n        )}\n      </GlassCard>\n\n      {/* Floating Action Button */}\n      <motion.button\n        className=\"fixed bottom-6 right-6 w-14 h-14 bg-primary text-primary-foreground rounded-full shadow-lg hover:scale-110 transition-transform duration-300 animate-glow z-50\"\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={handleCreateCourse}\n        data-testid=\"button-floating-action\"\n      >\n        <Plus className=\"w-6 h-6 mx-auto\" />\n      </motion.button>\n\n      {/* Course Creation Dialog */}\n      <Dialog open={createCourseOpen} onOpenChange={setCreateCourseOpen}>\n        <DialogContent className=\"glass-morphism border-neon\">\n          <DialogHeader>\n            <DialogTitle>\n              <GradientText>Create New Course</GradientText>\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...courseForm}>\n            <form onSubmit={courseForm.handleSubmit(onCreateCourse)} className=\"space-y-4\">\n              <FormField\n                control={courseForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Course Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter course title...\" \n                        {...field} \n                        data-testid=\"input-course-title\"\n                        className=\"glass-morphism\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={courseForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Course Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter course description...\" \n                        {...field} \n                        data-testid=\"textarea-course-description\"\n                        className=\"glass-morphism min-h-[100px]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setCreateCourseOpen(false)}\n                  data-testid=\"button-cancel-course\"\n                >\n                  Cancel\n                </Button>\n                <NeonButton \n                  type=\"submit\" \n                  neon \n                  disabled={createCourseMutation.isPending}\n                  data-testid=\"button-submit-course\"\n                >\n                  {createCourseMutation.isPending ? \"Creating...\" : \"Create Course\"}\n                </NeonButton>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Creation Dialog */}\n      <Dialog open={createAssignmentOpen} onOpenChange={setCreateAssignmentOpen}>\n        <DialogContent className=\"glass-morphism border-neon max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              <GradientText>Create New Assignment</GradientText>\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...assignmentForm}>\n            <form onSubmit={assignmentForm.handleSubmit(onCreateAssignment)} className=\"space-y-4\">\n              <FormField\n                control={assignmentForm.control}\n                name=\"courseId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Course</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"glass-morphism\" data-testid=\"select-course\">\n                          <SelectValue placeholder=\"Select a course\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {courses.map((course: any) => (\n                          <SelectItem key={course.id} value={course.id}>\n                            {course.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={assignmentForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assignment Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter assignment title...\" \n                        {...field} \n                        data-testid=\"input-assignment-title\"\n                        className=\"glass-morphism\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={assignmentForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter assignment description...\" \n                        {...field} \n                        data-testid=\"textarea-assignment-description\"\n                        className=\"glass-morphism min-h-[100px]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={assignmentForm.control}\n                  name=\"dueDate\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-col\">\n                      <FormLabel>Due Date</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button\n                              variant=\"outline\"\n                              className={cn(\n                                \"glass-morphism w-full pl-3 text-left font-normal\",\n                                !field.value && \"text-muted-foreground\"\n                              )}\n                              data-testid=\"button-due-date\"\n                            >\n                              {field.value ? (\n                                format(field.value, \"PPP\")\n                              ) : (\n                                <span>Pick a date</span>\n                              )}\n                              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0 glass-morphism\" align=\"start\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            disabled={(date) =>\n                              date < new Date(new Date().setHours(0, 0, 0, 0))\n                            }\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={assignmentForm.control}\n                  name=\"maxPoints\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max Points</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          placeholder=\"100\"\n                          value={field.value || 100}\n                          onChange={(e) => {\n                            const value = e.target.value === '' ? 100 : parseInt(e.target.value) || 100;\n                            field.onChange(value);\n                          }}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                          data-testid=\"input-max-points\"\n                          className=\"glass-morphism\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setCreateAssignmentOpen(false)}\n                  data-testid=\"button-cancel-assignment\"\n                >\n                  Cancel\n                </Button>\n                <NeonButton \n                  type=\"submit\" \n                  neon \n                  disabled={createAssignmentMutation.isPending}\n                  data-testid=\"button-submit-assignment\"\n                >\n                  {createAssignmentMutation.isPending ? \"Creating...\" : \"Create Assignment\"}\n                </NeonButton>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Announcement Creation Dialog */}\n      <Dialog open={createAnnouncementOpen} onOpenChange={setCreateAnnouncementOpen}>\n        <DialogContent className=\"glass-morphism border-neon max-w-2xl\" aria-describedby=\"announcement-description\">\n          <DialogHeader>\n            <DialogTitle>\n              <GradientText>Add Announcement</GradientText>\n            </DialogTitle>\n            <p id=\"announcement-description\" className=\"sr-only\">Create a new announcement for your students</p>\n          </DialogHeader>\n          <Form {...announcementForm}>\n            <form onSubmit={announcementForm.handleSubmit(onCreateAnnouncement)} className=\"space-y-4\">\n              <FormField\n                control={announcementForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Announcement Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter announcement title...\" \n                        {...field} \n                        data-testid=\"input-announcement-title\"\n                        className=\"glass-morphism\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={announcementForm.control}\n                name=\"content\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Content</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter announcement content...\" \n                        {...field} \n                        data-testid=\"textarea-announcement-content\"\n                        className=\"glass-morphism min-h-[120px]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={announcementForm.control}\n                name=\"isGlobal\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 glass-morphism\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"checkbox-global-announcement\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>\n                        Global Announcement\n                      </FormLabel>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Visible to all students\n                      </p>\n                    </div>\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setCreateAnnouncementOpen(false)}\n                  data-testid=\"button-cancel-announcement\"\n                >\n                  Cancel\n                </Button>\n                <NeonButton \n                  type=\"submit\" \n                  neon \n                  disabled={createAnnouncementMutation.isPending}\n                  data-testid=\"button-submit-announcement\"\n                >\n                  {createAnnouncementMutation.isPending ? \"Creating...\" : \"Add Announcement\"}\n                </NeonButton>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Timetable Creation Dialog */}\n      <Dialog open={createTimetableOpen} onOpenChange={setCreateTimetableOpen}>\n        <DialogContent className=\"glass-morphism border-neon max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              <GradientText>Add Timetable Entry</GradientText>\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...timetableForm}>\n            <form onSubmit={timetableForm.handleSubmit(onCreateTimetable)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={timetableForm.control}\n                  name=\"courseId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"glass-morphism\" data-testid=\"select-timetable-course\">\n                            <SelectValue placeholder=\"Select a course\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.isArray(courses) && courses\n                            .filter((course: any) => course?.id && course?.title)\n                            .map((course: any) => (\n                              <SelectItem key={String(course.id)} value={String(course.id)}>\n                                {course.title}\n                              </SelectItem>\n                            ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={timetableForm.control}\n                  name=\"dayOfWeek\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Day of Week</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                        <FormControl>\n                          <SelectTrigger className=\"glass-morphism\" data-testid=\"select-day-of-week\">\n                            <SelectValue placeholder=\"Select day\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"1\">Monday</SelectItem>\n                          <SelectItem value=\"2\">Tuesday</SelectItem>\n                          <SelectItem value=\"3\">Wednesday</SelectItem>\n                          <SelectItem value=\"4\">Thursday</SelectItem>\n                          <SelectItem value=\"5\">Friday</SelectItem>\n                          <SelectItem value=\"6\">Saturday</SelectItem>\n                          <SelectItem value=\"0\">Sunday</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={timetableForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Class Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter class title...\" \n                        {...field} \n                        data-testid=\"input-timetable-title\"\n                        className=\"glass-morphism\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={timetableForm.control}\n                  name=\"startTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Time</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\"\n                          {...field} \n                          data-testid=\"input-start-time\"\n                          className=\"glass-morphism\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={timetableForm.control}\n                  name=\"endTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Time</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\"\n                          {...field} \n                          data-testid=\"input-end-time\"\n                          className=\"glass-morphism\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={timetableForm.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter location (optional)...\" \n                        {...field} \n                        data-testid=\"input-timetable-location\"\n                        className=\"glass-morphism\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setCreateTimetableOpen(false)}\n                  data-testid=\"button-cancel-timetable\"\n                >\n                  Cancel\n                </Button>\n                <NeonButton \n                  type=\"submit\" \n                  neon \n                  disabled={createTimetableMutation.isPending}\n                  data-testid=\"button-submit-timetable\"\n                >\n                  {createTimetableMutation.isPending ? \"Creating...\" : \"Add to Timetable\"}\n                </NeonButton>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </MainLayout>\n  );\n}\n","size_bytes":34408},"client/src/pages/timetable-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { motion } from \"framer-motion\";\nimport { format, startOfWeek, addDays, addWeeks, subWeeks } from \"date-fns\";\nimport { useState } from \"react\";\nimport { \n  Calendar,\n  Clock,\n  MapPin,\n  Plus,\n  ChevronLeft,\n  ChevronRight,\n  BookOpen\n} from \"lucide-react\";\n\nexport default function TimetablePage() {\n  const [currentWeek, setCurrentWeek] = useState(() => startOfWeek(new Date()));\n  const [addEventOpen, setAddEventOpen] = useState(false);\n\n  const { data: timetable = [] } = useQuery({\n    queryKey: [\"/api/timetable\"],\n  });\n\n  const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  \n  const getTimetableForDay = (dayIndex: number) => {\n    return timetable.filter((entry: any) => entry.dayOfWeek === dayIndex)\n      .sort((a: any, b: any) => a.startTime.localeCompare(b.startTime));\n  };\n\n  const formatTimeRange = (startTime: string, endTime: string) => {\n    return `${startTime} - ${endTime}`;\n  };\n\n  const getColorForCourse = (index: number) => {\n    const colors = [\n      \"border-l-primary bg-primary/10\",\n      \"border-l-secondary bg-secondary/10\", \n      \"border-l-accent bg-accent/10\",\n      \"border-l-green-400 bg-green-400/10\",\n      \"border-l-blue-400 bg-blue-400/10\"\n    ];\n    return colors[index % colors.length];\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeek(prev => \n      direction === 'next' ? addWeeks(prev, 1) : subWeeks(prev, 1)\n    );\n  };\n\n  const handleAddEvent = () => {\n    setAddEventOpen(true);\n  };\n\n  return (\n    <MainLayout>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"space-y-8\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              <GradientText>Weekly Timetable</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              View your class schedule and upcoming sessions\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={() => navigateWeek('prev')}\n              data-testid=\"button-prev-week\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"outline\" data-testid=\"text-current-week\">\n              {format(currentWeek, \"MMM d\")} - {format(addDays(currentWeek, 6), \"MMM d, yyyy\")}\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={() => navigateWeek('next')}\n              data-testid=\"button-next-week\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              onClick={handleAddEvent}\n              data-testid=\"button-add-event\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Event\n            </Button>\n          </div>\n        </div>\n\n        {/* Weekly View */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <div className=\"grid grid-cols-8 gap-4\">\n            {/* Time column */}\n            <div className=\"space-y-4\">\n              <div className=\"h-12 flex items-center\">\n                <span className=\"text-sm font-medium text-muted-foreground\">Time</span>\n              </div>\n              {Array.from({ length: 12 }, (_, i) => i + 8).map(hour => (\n                <div key={hour} className=\"h-20 flex items-start\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {hour}:00\n                  </span>\n                </div>\n              ))}\n            </div>\n\n            {/* Day columns */}\n            {weekDays.map((day, dayIndex) => {\n              const dayEntries = getTimetableForDay(dayIndex);\n              const isToday = dayIndex === new Date().getDay();\n              \n              return (\n                <motion.div\n                  key={day}\n                  className=\"space-y-4\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: dayIndex * 0.1 }}\n                >\n                  {/* Day header */}\n                  <div className=\"h-12 flex flex-col items-center justify-center glass-morphism rounded-lg\">\n                    <span className={`text-sm font-medium ${isToday ? 'text-primary' : 'text-foreground'}`}>\n                      {day}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {format(addDays(currentWeek, dayIndex), \"MMM d\")}\n                    </span>\n                  </div>\n\n                  {/* Time slots */}\n                  <div className=\"relative space-y-4\">\n                    {Array.from({ length: 12 }, (_, i) => (\n                      <div key={i} className=\"h-20 border-b border-border/30 relative\">\n                        {/* Render classes for this time slot */}\n                        {dayEntries\n                          .filter(entry => {\n                            const entryHour = parseInt(entry.startTime.split(':')[0]);\n                            return entryHour === i + 8;\n                          })\n                          .map((entry, entryIndex) => (\n                            <motion.div\n                              key={entry.id}\n                              className={`absolute inset-x-0 top-0 p-2 rounded-lg border-l-4 ${getColorForCourse(entryIndex)} hover:scale-105 transition-transform duration-300 cursor-pointer`}\n                              whileHover={{ scale: 1.02 }}\n                              data-testid={`timetable-entry-${entry.id}`}\n                            >\n                              <div className=\"space-y-1\">\n                                <h4 className=\"text-sm font-semibold truncate\">\n                                  {entry.title}\n                                </h4>\n                                <p className=\"text-xs text-muted-foreground truncate\">\n                                  {entry.courseTitle}\n                                </p>\n                                <div className=\"flex items-center text-xs text-muted-foreground\">\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  {formatTimeRange(entry.startTime, entry.endTime)}\n                                </div>\n                                {entry.location && (\n                                  <div className=\"flex items-center text-xs text-muted-foreground\">\n                                    <MapPin className=\"h-3 w-3 mr-1\" />\n                                    {entry.location}\n                                  </div>\n                                )}\n                              </div>\n                            </motion.div>\n                          ))}\n                      </div>\n                    ))}\n                  </div>\n                </motion.div>\n              );\n            })}\n          </div>\n        </GlassCard>\n\n        {/* Today's Schedule */}\n        <GlassCard className=\"p-6 neon-glow\">\n          <h2 className=\"text-xl font-semibold mb-6\">\n            <GradientText>Today's Schedule</GradientText>\n          </h2>\n          \n          <div className=\"space-y-4\">\n            {getTimetableForDay(new Date().getDay()).length > 0 ? (\n              getTimetableForDay(new Date().getDay()).map((entry: any, index: number) => (\n                <motion.div\n                  key={entry.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  className=\"flex items-center space-x-4 p-4 glass-morphism rounded-lg hover:neon-border transition-all duration-300\"\n                >\n                  <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                    <BookOpen className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{entry.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{entry.courseTitle}</p>\n                    <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mt-1\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        {formatTimeRange(entry.startTime, entry.endTime)}\n                      </div>\n                      {entry.location && (\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-3 w-3 mr-1\" />\n                          {entry.location}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">\n                    {entry.startTime}\n                  </Badge>\n                </motion.div>\n              ))\n            ) : (\n              <div className=\"text-center py-12\">\n                <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No classes today</h3>\n                <p className=\"text-muted-foreground\">\n                  Enjoy your free day! Check back tomorrow for your schedule.\n                </p>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Add Event Dialog */}\n        <Dialog open={addEventOpen} onOpenChange={setAddEventOpen}>\n          <DialogContent className=\"glass-morphism border-neon\" data-testid=\"modal-timetable-event\">\n            <DialogHeader>\n              <DialogTitle>\n                <GradientText>Add Timetable Event</GradientText>\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                This feature is coming soon! You can create timetable entries from the teacher dashboard.\n              </p>\n              <div className=\"flex justify-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setAddEventOpen(false)}\n                  data-testid=\"button-close-event-dialog\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </motion.div>\n    </MainLayout>\n  );\n}\n","size_bytes":11057},"client/src/components/dashboard/announcement-card.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Megaphone, Info, Trophy } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface AnnouncementCardProps {\n  announcement: {\n    id: string;\n    title: string;\n    content: string;\n    authorName?: string;\n    courseName?: string;\n    createdAt: string;\n  };\n}\n\nexport function AnnouncementCard({ announcement }: AnnouncementCardProps) {\n  const getIcon = () => {\n    if (announcement.title.toLowerCase().includes('assignment')) {\n      return <Megaphone className=\"text-primary text-sm\" />;\n    }\n    if (announcement.title.toLowerCase().includes('achievement')) {\n      return <Trophy className=\"text-green-400 text-sm\" />;\n    }\n    return <Info className=\"text-secondary text-sm\" />;\n  };\n\n  const getIconBg = () => {\n    if (announcement.title.toLowerCase().includes('assignment')) {\n      return 'bg-primary/20';\n    }\n    if (announcement.title.toLowerCase().includes('achievement')) {\n      return 'bg-green-400/20';\n    }\n    return 'bg-secondary/20';\n  };\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      transition={{ duration: 0.3 }}\n    >\n      <GlassCard className=\"p-4 hover:neon-border transition-all duration-300\">\n        <div className=\"flex items-start space-x-4\">\n          <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${getIconBg()}`}>\n            {getIcon()}\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-sm\">{announcement.title}</h3>\n            <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n              {announcement.content}\n            </p>\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              <span>{announcement.authorName || 'System'}</span>\n              <span>{formatDistanceToNow(new Date(announcement.createdAt))} ago</span>\n            </div>\n          </div>\n        </div>\n      </GlassCard>\n    </motion.div>\n  );\n}\n","size_bytes":2136},"client/src/components/dashboard/announcements-widget.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { AnnouncementCard } from \"./announcement-card\";\nimport { Calendar } from \"lucide-react\";\n\ninterface Announcement {\n  id: string;\n  title: string;\n  content: string;\n  authorName?: string;\n  courseName?: string;\n  createdAt: string;\n}\n\ninterface AnnouncementsWidgetProps {\n  announcements: Announcement[];\n  limit?: number;\n}\n\nexport function AnnouncementsWidget({ announcements, limit = 3 }: AnnouncementsWidgetProps) {\n  const recentAnnouncements = announcements.slice(0, limit);\n\n  return (\n    <GlassCard className=\"p-6 neon-glow\">\n      <h2 className=\"text-xl font-semibold mb-6\">\n        <GradientText>Recent Announcements</GradientText>\n      </h2>\n      <div className=\"space-y-4\">\n        {recentAnnouncements.length > 0 ? (\n          recentAnnouncements.map((announcement) => (\n            <AnnouncementCard key={announcement.id} announcement={announcement} />\n          ))\n        ) : (\n          <div className=\"text-center py-8\">\n            <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No announcements yet</p>\n          </div>\n        )}\n      </div>\n      <NeonButton className=\"w-full mt-6\" variant=\"outline\" neon>\n        View All Announcements\n      </NeonButton>\n    </GlassCard>\n  );\n}\n","size_bytes":1464},"client/src/components/dashboard/assignment-card.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { format } from \"date-fns\";\nimport { motion } from \"framer-motion\";\n\ninterface AssignmentCardProps {\n  assignment: {\n    id: string;\n    title: string;\n    dueDate: string;\n    courseTitle?: string;\n    status?: string;\n  };\n}\n\nexport function AssignmentCard({ assignment }: AssignmentCardProps) {\n  const dueDate = new Date(assignment.dueDate);\n  const isOverdue = dueDate < new Date();\n  const daysUntilDue = Math.ceil((dueDate.getTime() - new Date().getTime()) / (1000 * 3600 * 24));\n\n  const getBorderColor = () => {\n    if (isOverdue) return \"border-l-destructive\";\n    if (daysUntilDue <= 2) return \"border-l-destructive\";\n    if (daysUntilDue <= 5) return \"border-l-accent\";\n    return \"border-l-primary\";\n  };\n\n  const getStatusBadge = () => {\n    if (isOverdue) return { text: \"Overdue\", variant: \"destructive\" as const };\n    if (daysUntilDue <= 2) return { text: `Due in ${daysUntilDue} day${daysUntilDue === 1 ? '' : 's'}`, variant: \"destructive\" as const };\n    if (daysUntilDue <= 5) return { text: `Due in ${daysUntilDue} days`, variant: \"secondary\" as const };\n    return { text: `Due in ${daysUntilDue} days`, variant: \"outline\" as const };\n  };\n\n  const statusBadge = getStatusBadge();\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      transition={{ duration: 0.3 }}\n    >\n      <GlassCard className={`p-4 border-l-4 ${getBorderColor()}`}>\n        <h3 className=\"font-semibold text-sm\">{assignment.title}</h3>\n        {assignment.courseTitle && (\n          <p className=\"text-xs text-muted-foreground mb-2\">{assignment.courseTitle}</p>\n        )}\n        <div className=\"flex items-center justify-between\">\n          <Badge variant={statusBadge.variant} className=\"text-xs\">\n            {statusBadge.text}\n          </Badge>\n          <span className=\"text-xs text-muted-foreground\">\n            {format(dueDate, \"MMM d, yyyy\")}\n          </span>\n        </div>\n      </GlassCard>\n    </motion.div>\n  );\n}\n","size_bytes":2053},"client/src/components/dashboard/assignment-deadlines.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { AssignmentCard } from \"./assignment-card\";\nimport { ClipboardList } from \"lucide-react\";\n\ninterface Assignment {\n  id: string;\n  title: string;\n  dueDate: string;\n  courseTitle?: string;\n  status?: string;\n}\n\ninterface AssignmentDeadlinesProps {\n  assignments: Assignment[];\n  limit?: number;\n}\n\nexport function AssignmentDeadlines({ assignments, limit = 3 }: AssignmentDeadlinesProps) {\n  const upcomingAssignments = assignments\n    .filter((a) => !a.status || a.status === \"pending\")\n    .slice(0, limit);\n\n  return (\n    <GlassCard className=\"p-6 neon-glow\">\n      <h2 className=\"text-xl font-semibold mb-6\">\n        <GradientText>Upcoming Deadlines</GradientText>\n      </h2>\n      <div className=\"space-y-4\">\n        {upcomingAssignments.length > 0 ? (\n          upcomingAssignments.map((assignment) => (\n            <AssignmentCard key={assignment.id} assignment={assignment} />\n          ))\n        ) : (\n          <div className=\"text-center py-8\">\n            <ClipboardList className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No pending assignments</p>\n          </div>\n        )}\n      </div>\n      <NeonButton className=\"w-full mt-4\" variant=\"outline\" neon>\n        View All Assignments\n      </NeonButton>\n    </GlassCard>\n  );\n}\n","size_bytes":1485},"client/src/components/dashboard/course-card.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BookOpen } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface CourseCardProps {\n  course: {\n    id: string;\n    title: string;\n    description?: string;\n    thumbnail?: string;\n    progress?: number;\n  };\n}\n\nexport function CourseCard({ course }: CourseCardProps) {\n  const progress = course.progress || Math.floor(Math.random() * 100);\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      transition={{ duration: 0.3 }}\n    >\n      <GlassCard className=\"p-4 hover:neon-border transition-all duration-300\">\n        <div className=\"flex items-center space-x-4\">\n          {course.thumbnail ? (\n            <img\n              src={course.thumbnail}\n              alt={course.title}\n              className=\"w-16 h-12 rounded-lg object-cover\"\n            />\n          ) : (\n            <div className=\"w-16 h-12 rounded-lg bg-primary/20 flex items-center justify-center\">\n              <BookOpen className=\"w-6 h-6 text-primary\" />\n            </div>\n          )}\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold\">{course.title}</h3>\n            {course.description && (\n              <p className=\"text-sm text-muted-foreground\">{course.description}</p>\n            )}\n            <div className=\"flex items-center space-x-2 mt-2\">\n              <Progress value={progress} className=\"flex-1 h-2\" />\n              <span className=\"text-xs text-muted-foreground\">{progress}%</span>\n            </div>\n          </div>\n          <Button size=\"sm\" className=\"hover:bg-primary/80 transition-colors duration-300\">\n            Continue\n          </Button>\n        </div>\n      </GlassCard>\n    </motion.div>\n  );\n}\n","size_bytes":1837},"client/src/components/dashboard/course-list.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { CourseCard } from \"./course-card\";\nimport { BookOpen } from \"lucide-react\";\n\ninterface Course {\n  id: string;\n  title: string;\n  description?: string;\n  thumbnail?: string;\n  progress?: number;\n}\n\ninterface CourseListProps {\n  courses: Course[];\n  title: string;\n  limit?: number;\n}\n\nexport function CourseList({ courses, title, limit }: CourseListProps) {\n  const displayCourses = limit ? courses.slice(0, limit) : courses;\n\n  return (\n    <GlassCard className=\"p-6 neon-glow\">\n      <h2 className=\"text-xl font-semibold mb-6\">\n        <GradientText>{title}</GradientText>\n      </h2>\n      <div className=\"space-y-4\">\n        {displayCourses.length > 0 ? (\n          displayCourses.map((course) => (\n            <CourseCard key={course.id} course={course} />\n          ))\n        ) : (\n          <div className=\"text-center py-8\">\n            <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No courses available</p>\n          </div>\n        )}\n      </div>\n    </GlassCard>\n  );\n}\n","size_bytes":1181},"client/src/components/dashboard/performance-chart.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { TrendingUp } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport function PerformanceChart() {\n  return (\n    <GlassCard className=\"p-6 neon-glow\">\n      <h2 className=\"text-xl font-semibold mb-6\">\n        <GradientText>Performance Analytics</GradientText>\n      </h2>\n      \n      <motion.div\n        className=\"chart-container h-48\"\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <TrendingUp className=\"text-4xl text-primary mb-4 mx-auto w-12 h-12\" />\n            <p className=\"text-muted-foreground\">Performance chart will render here</p>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Integration with Recharts for grade trends over time\n            </p>\n          </div>\n        </div>\n      </motion.div>\n    </GlassCard>\n  );\n}\n","size_bytes":1116},"client/src/components/dashboard/stats-card.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { motion } from \"framer-motion\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  color: string;\n  trend?: string;\n}\n\nexport function StatsCard({ title, value, icon: Icon, color, trend }: StatsCardProps) {\n  const colorClasses = {\n    primary: \"text-primary bg-primary/20\",\n    secondary: \"text-secondary bg-secondary/20\",\n    accent: \"text-accent bg-accent/20\",\n    green: \"text-green-400 bg-green-400/20\",\n  };\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.05 }}\n      transition={{ duration: 0.3 }}\n    >\n      <GlassCard className=\"p-6 neon-glow hover:neon-border transition-all duration-300 animate-float\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className={`text-2xl font-bold ${colorClasses[color as keyof typeof colorClasses]?.split(' ')[0] || 'text-primary'}`}>\n              {value}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">{title}</p>\n            {trend && (\n              <p className=\"text-xs text-green-400 mt-1\">\n                {trend} from last week\n              </p>\n            )}\n          </div>\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorClasses[color as keyof typeof colorClasses] || 'text-primary bg-primary/20'}`}>\n            <Icon className=\"w-6 h-6\" />\n          </div>\n        </div>\n      </GlassCard>\n    </motion.div>\n  );\n}\n","size_bytes":1539},"client/src/components/dashboard/stats-grid.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { StatsCard } from \"./stats-card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface Stat {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  color: string;\n  trend?: string;\n}\n\ninterface StatsGridProps {\n  stats: Stat[];\n}\n\nexport function StatsGrid({ stats }: StatsGridProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {stats.map((stat, index) => (\n        <motion.div\n          key={stat.title}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: index * 0.1 }}\n        >\n          <StatsCard {...stat} />\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":749},"client/src/components/dashboard/timetable-widget.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, CalendarPlus } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface TimetableEntry {\n  id: string;\n  title: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  courseTitle?: string;\n}\n\ninterface TimetableWidgetProps {\n  timetable: TimetableEntry[];\n}\n\nexport function TimetableWidget({ timetable }: TimetableWidgetProps) {\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date().getDay();\n\n  const getTimetableForDay = (dayIndex: number) => {\n    return timetable.filter(entry => entry.dayOfWeek === dayIndex);\n  };\n\n  return (\n    <GlassCard className=\"p-6 neon-glow mb-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold\">\n          <GradientText>Weekly Timetable</GradientText>\n        </h2>\n        <Button className=\"bg-primary text-primary-foreground hover:bg-primary/80 transition-colors duration-300\">\n          <CalendarPlus className=\"mr-2 h-4 w-4\" />\n          View Full Schedule\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-7 gap-2\">\n        {weekDays.map((day, index) => {\n          const dayEntries = getTimetableForDay(index);\n          const isToday = index === today;\n          \n          return (\n            <motion.div\n              key={day}\n              className=\"text-center\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n            >\n              <div className={`text-sm font-medium mb-2 ${isToday ? 'text-primary' : 'text-muted-foreground'}`}>\n                {day}\n              </div>\n              <div className=\"space-y-1 min-h-[100px]\">\n                {dayEntries.length > 0 ? (\n                  dayEntries.map((entry) => (\n                    <GlassCard \n                      key={entry.id} \n                      className={`p-2 text-xs ${isToday ? 'neon-border' : ''}`}\n                    >\n                      <div className=\"font-medium text-primary\">{entry.title}</div>\n                      <div className=\"text-muted-foreground\">{entry.startTime}</div>\n                    </GlassCard>\n                  ))\n                ) : (\n                  <div className=\"text-xs text-muted-foreground py-4\">\n                    {index === 0 || index === 6 ? 'No classes' : 'Free day'}\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n    </GlassCard>\n  );\n}\n","size_bytes":2745},"client/src/components/dashboard/wellness-monitor.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Brain } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport function WellnessMonitor() {\n  const { data: emotions = [] } = useQuery({\n    queryKey: [\"/api/emotions\"],\n  });\n\n  const getOverallMood = () => {\n    if (emotions.length === 0) return { mood: \"Unknown\", color: \"text-muted-foreground\", indicator: \"bg-muted\" };\n    \n    // Simple mood calculation based on recent emotions\n    const recentEmotions = emotions.slice(0, 5);\n    const positiveEmotions = recentEmotions.filter((e: any) => \n      [\"happy\", \"excited\", \"focused\"].includes(e.emotion)\n    );\n    \n    if (positiveEmotions.length >= 3) {\n      return { mood: \"Good\", color: \"text-green-400\", indicator: \"bg-green-400\" };\n    } else if (positiveEmotions.length >= 1) {\n      return { mood: \"Moderate\", color: \"text-yellow-400\", indicator: \"bg-yellow-400\" };\n    } else {\n      return { mood: \"Needs Attention\", color: \"text-red-400\", indicator: \"bg-red-400\" };\n    }\n  };\n\n  const overallMood = getOverallMood();\n\n  const wellnessMetrics = [\n    {\n      label: \"Overall Mood\",\n      value: overallMood.mood,\n      color: overallMood.color,\n      indicator: overallMood.indicator\n    },\n    {\n      label: \"Focus Level\",\n      value: \"High\",\n      color: \"text-primary\",\n      indicator: \"bg-primary\"\n    },\n    {\n      label: \"Stress Level\",\n      value: \"Moderate\",\n      color: \"text-yellow-400\",\n      indicator: \"bg-yellow-400\"\n    }\n  ];\n\n  return (\n    <GlassCard className=\"p-6 neon-glow\">\n      <h2 className=\"text-xl font-semibold mb-6\">\n        <GradientText>Wellness Monitor</GradientText>\n      </h2>\n      \n      <div className=\"space-y-4\">\n        {wellnessMetrics.map((metric, index) => (\n          <motion.div\n            key={metric.label}\n            className=\"flex items-center justify-between\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: index * 0.1 }}\n          >\n            <span className=\"text-sm\">{metric.label}</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full animate-pulse ${metric.indicator}`}></div>\n              <span className={`text-sm ${metric.color}`}>{metric.value}</span>\n            </div>\n          </motion.div>\n        ))}\n        \n        {/* AI Analysis Section */}\n        <motion.div\n          className=\"mt-6\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.3 }}\n        >\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"text-center\">\n                <Brain className=\"text-3xl text-secondary mb-2 mx-auto w-8 h-8\" />\n                <p className=\"text-sm text-muted-foreground\">AI Emotion Analysis</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Monitoring your emotional well-being\n                </p>\n              </div>\n            </div>\n          </GlassCard>\n        </motion.div>\n      </div>\n    </GlassCard>\n  );\n}\n","size_bytes":3307},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useTheme } from \"@/context/theme-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Bell, Moon, Sun, Settings, LogOut } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function Header() {\n  const { user, logoutMutation } = useAuth();\n  const { theme, setTheme } = useTheme();\n\n  if (!user) return null;\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"Good morning\";\n    if (hour < 18) return \"Good afternoon\";\n    return \"Good evening\";\n  };\n\n  return (\n    <header className=\"flex justify-between items-center p-6 border-b border-border glass-morphism\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">\n          <GradientText>{getGreeting()}, {user.firstName}!</GradientText>\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Ready to continue your learning journey?\n        </p>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        {/* Notifications */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"relative glass-morphism hover:neon-glow transition-all duration-300\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full animate-pulse\"></span>\n        </Button>\n        \n        {/* Theme Toggle */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"glass-morphism hover:neon-glow transition-all duration-300\"\n          onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n          data-testid=\"button-theme-toggle\"\n        >\n          {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n        </Button>\n        \n        {/* User Menu */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"glass-morphism hover:neon-glow transition-all duration-300\"\n              data-testid=\"button-user-menu\"\n            >\n              <Settings className=\"h-5 w-5\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"glass-morphism border-border\">\n            <DropdownMenuItem>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              onClick={() => logoutMutation.mutate()}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Logout</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3003},"client/src/components/layout/main-layout.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Sidebar } from \"./sidebar\";\nimport { Header } from \"./header\";\nimport { motion } from \"framer-motion\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function MainLayout({ children }: MainLayoutProps) {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64\">\n        <Header />\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"p-6\"\n        >\n          {children}\n        </motion.div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":689},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  GraduationCap,\n  Home,\n  BookOpen,\n  ClipboardList,\n  Calendar,\n  TrendingUp,\n  Megaphone,\n  Heart,\n  Settings,\n  Users,\n  Presentation,\n  UserCheck,\n} from \"lucide-react\";\n\nexport function Sidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  if (!user) return null;\n\n  const getNavigationItems = () => {\n    const baseItems = [\n      { href: \"/\", icon: Home, label: \"Dashboard\", roles: [\"student\", \"teacher\", \"parent\"] },\n      { href: \"/assignments\", icon: ClipboardList, label: \"Assignments\", roles: [\"student\", \"teacher\"] },\n      { href: \"/timetable\", icon: Calendar, label: \"Timetable\", roles: [\"student\", \"teacher\", \"parent\"] },\n      { href: \"/announcements\", icon: Megaphone, label: \"Announcements\", roles: [\"student\", \"teacher\", \"parent\"] },\n      { href: \"/profile\", icon: Settings, label: \"Profile\", roles: [\"student\", \"teacher\", \"parent\"] },\n    ];\n\n    if (user.role === \"student\") {\n      baseItems.splice(1, 0, { href: \"/courses\", icon: BookOpen, label: \"My Courses\", roles: [\"student\"] });\n      baseItems.splice(4, 0, { href: \"/emotion-monitor\", icon: Heart, label: \"Wellness\", roles: [\"student\"] });\n    }\n\n    if (user.role === \"teacher\") {\n      baseItems.splice(1, 0, { href: \"/courses\", icon: Presentation, label: \"My Courses\", roles: [\"teacher\"] });\n      baseItems.splice(4, 0, { href: \"/analytics\", icon: TrendingUp, label: \"Analytics\", roles: [\"teacher\"] });\n    }\n\n    if (user.role === \"parent\") {\n      baseItems.splice(1, 0, { href: \"/children\", icon: Users, label: \"Children\", roles: [\"parent\"] });\n      baseItems.splice(2, 0, { href: \"/progress\", icon: TrendingUp, label: \"Progress\", roles: [\"parent\"] });\n    }\n\n    return baseItems.filter(item => item.roles.includes(user.role));\n  };\n\n  const navigationItems = getNavigationItems();\n\n  return (\n    <aside className=\"w-64 glass-morphism border-r border-border fixed h-full z-30\">\n      <div className=\"p-6\">\n        {/* Logo */}\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center animate-glow\">\n            <GraduationCap className=\"text-white w-5 h-5\" />\n          </div>\n          <h1 className=\"text-xl font-bold\">\n            <GradientText>EduSphere</GradientText>\n          </h1>\n        </div>\n\n        {/* User Profile */}\n        <GlassCard className=\"p-4 mb-6 neon-glow\" data-testid=\"user-profile\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar>\n              <AvatarImage src={user.profilePicture || undefined} />\n              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                {user.firstName[0]}{user.lastName[0]}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"font-semibold text-sm\" data-testid=\"text-user-name\">\n                {user.firstName} {user.lastName}\n              </p>\n              <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n                {user.role}\n              </p>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Navigation */}\n        <nav className=\"space-y-2\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href || \n              (item.href !== \"/\" && location.startsWith(item.href));\n            \n            return (\n              <Link key={item.href} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 p-3 rounded-lg transition-all duration-300 cursor-pointer\",\n                    isActive\n                      ? \"bg-primary/20 text-primary neon-border\"\n                      : \"hover:bg-muted/50\"\n                  )}\n                  data-testid={`nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span>{item.label}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Role Switch */}\n        <GlassCard className=\"mt-8 p-3\">\n          <p className=\"text-xs text-muted-foreground mb-2\">Quick Access</p>\n          <div className=\"space-y-2\">\n            <Link href=\"/student\">\n              <div className=\"flex items-center space-x-2 text-xs p-2 rounded hover:bg-muted/50 transition-colors cursor-pointer\">\n                <UserCheck className=\"w-4 h-4\" />\n                <span>Student View</span>\n              </div>\n            </Link>\n            <Link href=\"/teacher\">\n              <div className=\"flex items-center space-x-2 text-xs p-2 rounded hover:bg-muted/50 transition-colors cursor-pointer\">\n                <Presentation className=\"w-4 h-4\" />\n                <span>Teacher View</span>\n              </div>\n            </Link>\n            <Link href=\"/parent\">\n              <div className=\"flex items-center space-x-2 text-xs p-2 rounded hover:bg-muted/50 transition-colors cursor-pointer\">\n                <Users className=\"w-4 h-4\" />\n                <span>Parent View</span>\n              </div>\n            </Link>\n          </div>\n        </GlassCard>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5596},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glass-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nexport interface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  neonGlow?: boolean;\n}\n\nconst GlassCard = forwardRef<HTMLDivElement, GlassCardProps>(\n  ({ className, neonGlow = false, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"glass-morphism rounded-lg\",\n          neonGlow && \"neon-glow\",\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nGlassCard.displayName = \"GlassCard\";\n\nexport { GlassCard };\n","size_bytes":566},"client/src/components/ui/gradient-text.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nexport interface GradientTextProps extends React.HTMLAttributes<HTMLSpanElement> {}\n\nconst GradientText = forwardRef<HTMLSpanElement, GradientTextProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <span\n        ref={ref}\n        className={cn(\"gradient-text\", className)}\n        {...props}\n      />\n    );\n  }\n);\n\nGradientText.displayName = \"GradientText\";\n\nexport { GradientText };\n","size_bytes":469},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/neon-button.tsx":{"content":"import { Button, ButtonProps } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nexport interface NeonButtonProps extends ButtonProps {\n  neon?: boolean;\n}\n\nconst NeonButton = forwardRef<HTMLButtonElement, NeonButtonProps>(\n  ({ className, neon = false, ...props }, ref) => {\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          neon && \"neon-border hover:neon-glow transition-all duration-300\",\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nNeonButton.displayName = \"NeonButton\";\n\nexport { NeonButton };\n","size_bytes":610},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/courses-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Course } from \"@shared/schema\";\nimport { CourseCard } from \"@/components/dashboard/course-card\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertCourseSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  BookOpen, \n  Search, \n  Filter, \n  Grid, \n  List,\n  Plus,\n  Users,\n  Clock,\n  Star\n} from \"lucide-react\";\n\ntype CourseFormData = z.infer<typeof insertCourseSchema>;\n\nexport default function CoursesPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [filterStatus, setFilterStatus] = useState<\"all\" | \"active\" | \"completed\">(\"all\");\n  const [createCourseOpen, setCreateCourseOpen] = useState(false);\n\n  const { data: courses = [], isLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n    enabled: !!user,\n  });\n\n  // Course creation mutation\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: CourseFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/courses\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setCreateCourseOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Course created successfully!\",\n      });\n      courseForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create course. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Course form\n  const courseForm = useForm<CourseFormData>({\n    resolver: zodResolver(insertCourseSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n    },\n  });\n\n  const onCreateCourse = (data: CourseFormData) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const handleCreateCourse = () => setCreateCourseOpen(true);\n\n  const filteredCourses = courses.filter((course) => {\n    const matchesSearch = course.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    if (filterStatus === \"all\") return matchesSearch;\n    if (filterStatus === \"active\") return matchesSearch && course.isActive;\n    if (filterStatus === \"completed\") return matchesSearch && !course.isActive;\n    \n    return matchesSearch;\n  });\n\n  const EmptyState = () => (\n    <motion.div \n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"text-center py-16\"\n    >\n      <div className=\"w-24 h-24 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n        <BookOpen className=\"text-primary w-12 h-12\" />\n      </div>\n      <h3 className=\"text-xl font-semibold mb-2\">\n        <GradientText>No Courses Yet</GradientText>\n      </h3>\n      <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n        {user?.role === \"student\" \n          ? \"You haven't enrolled in any courses yet. Start your learning journey!\"\n          : \"You haven't created any courses yet. Create your first course to get started.\"\n        }\n      </p>\n      {user?.role === \"teacher\" && (\n        <Button \n          className=\"neon-glow\" \n          onClick={handleCreateCourse}\n          data-testid=\"button-create-course-empty\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Course\n        </Button>\n      )}\n    </motion.div>\n  );\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\" data-testid=\"page-courses\">\n        {/* Header */}\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\"\n        >\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">\n              <GradientText>\n                {user?.role === \"student\" ? \"My Courses\" : \"Manage Courses\"}\n              </GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {user?.role === \"student\" \n                ? \"Track your learning progress and access course materials\"\n                : \"Create and manage your courses\"\n              }\n            </p>\n          </div>\n          \n          {user?.role === \"teacher\" && (\n            <Button \n              className=\"neon-glow\" \n              onClick={handleCreateCourse}\n              data-testid=\"button-create-course-header\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Course\n            </Button>\n          )}\n        </motion.div>\n\n        {/* Stats Row */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"grid grid-cols-1 md:grid-cols-4 gap-4\"\n        >\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <BookOpen className=\"text-primary w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Courses</p>\n                <p className=\"text-xl font-bold\">{courses.length}</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-400/20 rounded-lg flex items-center justify-center\">\n                <Star className=\"text-green-400 w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active</p>\n                <p className=\"text-xl font-bold\">\n                  {courses.filter((c) => c.isActive).length}\n                </p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-secondary/20 rounded-lg flex items-center justify-center\">\n                <Users className=\"text-secondary w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Students</p>\n                <p className=\"text-xl font-bold\">--</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-accent/20 rounded-lg flex items-center justify-center\">\n                <Clock className=\"text-accent w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Hours</p>\n                <p className=\"text-xl font-bold\">--</p>\n              </div>\n            </div>\n          </GlassCard>\n        </motion.div>\n\n        {/* Controls */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"flex flex-col md:flex-row gap-4 items-center justify-between\"\n        >\n          <div className=\"flex gap-4 flex-1\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search courses...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-courses\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant={filterStatus === \"all\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setFilterStatus(\"all\")}\n                data-testid=\"filter-all\"\n              >\n                All\n              </Button>\n              <Button\n                variant={filterStatus === \"active\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setFilterStatus(\"active\")}\n                data-testid=\"filter-active\"\n              >\n                Active\n              </Button>\n              <Button\n                variant={filterStatus === \"completed\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setFilterStatus(\"completed\")}\n                data-testid=\"filter-completed\"\n              >\n                Completed\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"grid\")}\n              data-testid=\"view-grid\"\n            >\n              <Grid className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"list\")}\n              data-testid=\"view-list\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </motion.div>\n\n        {/* Courses Grid/List */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <GlassCard key={i} className=\"p-6 animate-pulse\">\n                  <div className=\"h-40 bg-muted/50 rounded-lg mb-4\"></div>\n                  <div className=\"h-4 bg-muted/50 rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted/50 rounded w-2/3\"></div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : filteredCourses.length === 0 ? (\n            <EmptyState />\n          ) : (\n            <div className={\n              viewMode === \"grid\" \n                ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n                : \"space-y-4\"\n            }>\n              {filteredCourses.map((course: any, index: number) => (\n                <motion.div\n                  key={course.id || index}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  data-testid={`course-card-${index}`}\n                >\n                  <CourseCard course={course} />\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </motion.div>\n\n        {/* Create Course Dialog */}\n        <Dialog open={createCourseOpen} onOpenChange={setCreateCourseOpen}>\n          <DialogContent className=\"glass-morphism border-neon\">\n            <DialogHeader>\n              <DialogTitle>\n                Create New Course\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...courseForm}>\n              <form onSubmit={courseForm.handleSubmit(onCreateCourse)} className=\"space-y-4\">\n                <FormField\n                  control={courseForm.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter course title...\" \n                          {...field} \n                          data-testid=\"input-course-title\"\n                          className=\"glass-morphism\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={courseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter course description...\" \n                          {...field} \n                          data-testid=\"textarea-course-description\"\n                          className=\"glass-morphism min-h-[100px]\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setCreateCourseOpen(false)}\n                    data-testid=\"button-cancel-course\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"neon-glow\"\n                    disabled={createCourseMutation.isPending}\n                    data-testid=\"button-submit-course\"\n                  >\n                    {createCourseMutation.isPending ? \"Creating...\" : \"Create Course\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":14548},"client/src/pages/analytics-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Course } from \"@shared/schema\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { GradientText } from \"@/components/ui/gradient-text\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { PerformanceChart } from \"@/components/dashboard/performance-chart\";\nimport { motion } from \"framer-motion\";\nimport { \n  TrendingUp, \n  Users, \n  BookOpen, \n  ClipboardCheck,\n  Star,\n  Award,\n  BarChart3,\n  PieChart,\n  Calendar,\n  Target\n} from \"lucide-react\";\n\nexport default function AnalyticsPage() {\n  const { user } = useAuth();\n\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n    enabled: !!user,\n  });\n\n  const { data: assignments = [] } = useQuery({\n    queryKey: [\"/api/assignments\"],\n    enabled: !!user,\n  });\n\n  // Mock analytics data - in real app this would come from API\n  const analyticsData = {\n    totalStudents: 156,\n    activeStudents: 142,\n    completionRate: 87,\n    averageGrade: 4.2,\n    engagement: 92,\n    courseRating: 4.8\n  };\n\n  const performanceData = [\n    { month: \"Jan\", students: 120, assignments: 45, completion: 82 },\n    { month: \"Feb\", students: 135, assignments: 52, completion: 85 },\n    { month: \"Mar\", students: 142, assignments: 48, completion: 88 },\n    { month: \"Apr\", students: 156, assignments: 65, completion: 87 },\n    { month: \"May\", students: 149, assignments: 58, completion: 90 },\n    { month: \"Jun\", students: 163, assignments: 72, completion: 92 },\n  ];\n\n  const topPerformingCourses = courses.slice(0, 5).map((course, index: number) => ({\n    ...course,\n    enrollments: Math.floor(Math.random() * 50) + 20,\n    rating: (4 + Math.random()).toFixed(1),\n    completion: Math.floor(Math.random() * 30) + 70\n  }));\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\" data-testid=\"page-analytics\">\n        {/* Header */}\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\"\n        >\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">\n              <GradientText>Teaching Analytics</GradientText>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track student performance, course engagement, and teaching impact\n            </p>\n          </div>\n        </motion.div>\n\n        {/* Key Metrics */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\"\n        >\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                <Users className=\"text-primary w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Students</p>\n                <p className=\"text-xl font-bold\">{analyticsData.totalStudents}</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-400/20 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-green-400 w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Students</p>\n                <p className=\"text-xl font-bold\">{analyticsData.activeStudents}</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-secondary/20 rounded-lg flex items-center justify-center\">\n                <Target className=\"text-secondary w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n                <p className=\"text-xl font-bold\">{analyticsData.completionRate}%</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-accent/20 rounded-lg flex items-center justify-center\">\n                <Award className=\"text-accent w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg Grade</p>\n                <p className=\"text-xl font-bold\">{analyticsData.averageGrade}/5</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-400/20 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"text-blue-400 w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Engagement</p>\n                <p className=\"text-xl font-bold\">{analyticsData.engagement}%</p>\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-yellow-400/20 rounded-lg flex items-center justify-center\">\n                <Star className=\"text-yellow-400 w-5 h-5\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Course Rating</p>\n                <p className=\"text-xl font-bold\">{analyticsData.courseRating}/5</p>\n              </div>\n            </div>\n          </GlassCard>\n        </motion.div>\n\n        {/* Analytics Tabs */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4 glass-morphism\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">Performance</TabsTrigger>\n              <TabsTrigger value=\"courses\" data-testid=\"tab-courses\">Courses</TabsTrigger>\n              <TabsTrigger value=\"students\" data-testid=\"tab-students\">Students</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <GlassCard className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">\n                    <GradientText>Performance Trends</GradientText>\n                  </h3>\n                  <PerformanceChart />\n                </GlassCard>\n\n                <GlassCard className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">\n                    <GradientText>Recent Activity</GradientText>\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <ClipboardCheck className=\"text-primary w-4 h-4\" />\n                        <span className=\"text-sm\">New assignment submitted</span>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">2h ago</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Users className=\"text-secondary w-4 h-4\" />\n                        <span className=\"text-sm\">5 new student enrollments</span>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">4h ago</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Star className=\"text-yellow-400 w-4 h-4\" />\n                        <span className=\"text-sm\">Course rated 5/5 stars</span>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">1d ago</span>\n                    </div>\n                  </div>\n                </GlassCard>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"performance\" className=\"space-y-6\">\n              <GlassCard className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">\n                  <GradientText>Student Performance Analytics</GradientText>\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {performanceData.map((data, index) => (\n                    <div key={data.month} className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-primary mb-1\">\n                        {data.completion}%\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">{data.month}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {data.students} students, {data.assignments} assignments\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </GlassCard>\n            </TabsContent>\n\n            <TabsContent value=\"courses\" className=\"space-y-6\">\n              <GlassCard className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">\n                  <GradientText>Top Performing Courses</GradientText>\n                </h3>\n                <div className=\"space-y-4\">\n                  {topPerformingCourses.map((course, index: number) => (\n                    <div key={course.id || index} className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-semibold\">{course.title || `Course ${index + 1}`}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{course.enrollments} students enrolled</p>\n                      </div>\n                      <div className=\"text-right space-y-1\">\n                        <Badge variant=\"secondary\">{course.rating} ★</Badge>\n                        <div className=\"text-sm text-muted-foreground\">{course.completion}% completion</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </GlassCard>\n            </TabsContent>\n\n            <TabsContent value=\"students\" className=\"space-y-6\">\n              <GlassCard className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">\n                  <GradientText>Student Insights</GradientText>\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Engagement Levels</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">High Engagement</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-24 h-2 bg-muted rounded-full\">\n                            <div className=\"w-3/4 h-2 bg-green-400 rounded-full\"></div>\n                          </div>\n                          <span className=\"text-sm\">75%</span>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Medium Engagement</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-24 h-2 bg-muted rounded-full\">\n                            <div className=\"w-1/2 h-2 bg-yellow-400 rounded-full\"></div>\n                          </div>\n                          <span className=\"text-sm\">20%</span>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Low Engagement</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-24 h-2 bg-muted rounded-full\">\n                            <div className=\"w-1/12 h-2 bg-red-400 rounded-full\"></div>\n                          </div>\n                          <span className=\"text-sm\">5%</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Grade Distribution</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">A (90-100%)</span>\n                        <Badge variant=\"default\">45%</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">B (80-89%)</span>\n                        <Badge variant=\"secondary\">30%</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">C (70-79%)</span>\n                        <Badge variant=\"outline\">20%</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">D (60-69%)</span>\n                        <Badge variant=\"outline\">4%</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">F (Below 60%)</span>\n                        <Badge variant=\"destructive\">1%</Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </GlassCard>\n            </TabsContent>\n          </Tabs>\n        </motion.div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":14738}},"version":1}